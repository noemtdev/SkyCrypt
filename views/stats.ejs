<%

/*
..######...#######..##....##..######..########....###....##....##.########..######.
.##....##.##.....##.###...##.##....##....##......##.##...###...##....##....##....##
.##.......##.....##.####..##.##..........##.....##...##..####..##....##....##......
.##.......##.....##.##.##.##..######.....##....##.....##.##.##.##....##.....######.
.##.......##.....##.##..####.......##....##....#########.##..####....##..........##
.##....##.##.....##.##...###.##....##....##....##.....##.##...###....##....##....##
..######...#######..##....##..######.....##....##.....##.##....##....##.....######.
*/
const rarityOrder = ["very_special", "special", "supreme", "divine", "mythic", "legendary", "epic", "rare", "uncommon", "common"];
const slayerOrder = ["zombie", "spider", "wolf", "enderman", "vampire", "blaze"];
const badgeOrder = ["gold", "silver", "bronze"];
const trophyFishOrder = ["bronze", "silver", "gold", "diamond"]

const skillItems = {
  alchemy: "icon-379_0",
  archer: 'icon-261_0',
  berserk: 'icon-267_0',
  carpentry: "icon-58_0",
  catacombs: 'head-964e1c3e315c8d8fffc37985b6681c5bd16a6f97ffd07199e8a05efbef103793',
  combat: "icon-272_0",
  enchanting: "icon-116_0",
  farming: "icon-294_0",
  fishing: "icon-346_0",
  foraging: "icon-6_3",
  healer: 'icon-373_0',
  mage: 'icon-369_0',
  mining: "icon-274_0",
  runecrafting: "icon-378_0",
  social: "icon-388_0",
  taming: "icon-383_0",
  tank: 'icon-299_0',
  skyblock_level: 'head-2e2cc42015e6678f8fd49ccc01fbf787f1ba2c32bcf559a015332fc5db50',
};

const bestiary = {
  private: {
    head: "/head/c9c8881e42915a9d29bb61a16fb26d059913204d265df5b439b3d792acd56",
    name: "Private Island",
  },
  hub: {
    head: "/head/d7cc6687423d0570d556ac53e0676cb563bbdd9717cd8269bdebed6f6d4e7bf8",
    name: "Hub",
  },
  spiders: {
    head: "/head/c754318a3376f470e481dfcd6c83a59aa690ad4b4dd7577fdad1c2ef08d8aee6",
    name: "Spider's Den",
  },
  fortress: {
    head: "/head/c3687e25c632bce8aa61e0d64c24e694c3eea629ea944f4cf30dcfb4fbce071",
    name: "Crimson Isle",
  },
  end: {
    head: "/head/7840b87d52271d2a755dedc82877e0ed3df67dcc42ea479ec146176b02779a5",
    name: "The End",
  },
  caverns: {
    head: "/head/569a1f114151b4521373f34bc14c2963a5011cdc25a6554c48c708cd96ebfc",
    name: "Deep Caverns",
  },
  park: {
    head: "/head/a221f813dacee0fef8c59f76894dbb26415478d9ddfc44c2e708a6d3b7549b",
    name: "The Park",
  },
  spooky: {
    head: "/head/8db711ff52eedda59c434bb03169763d7c40b5b89127778feacd63aa94dfc",
    name: "Spooky Festival",
  },
  catacombs: {
    head: "/head/964e1c3e315c8d8fffc37985b6681c5bd16a6f97ffd07199e8a05efbef103793",
    name: "Catacombs",
  },
}

const slayerInfo = {
  zombie: {
    boss: "Revenant Horror",
    head: "/head/1fc0184473fe882d2895ce7cbc8197bd40ff70bf10d3745de97b6c2a9c5fc78f",
  },
  spider: {
    boss: "Tarantula Broodfather",
    head: "/head/9d7e3b19ac4f3dee9c5677c135333b9d35a7f568b63d1ef4ada4b068b5a25",
  },
  wolf: {
    boss: "Sven Packmaster",
    head: "/head/f83a2aa9d3734b919ac24c9659e5e0f86ecafbf64d4788cfa433bbec189e8",
  },
  enderman: {
    boss: "Voidgloom Seraph",
    head: "/head/1b09a3752510e914b0bdc9096b392bb359f7a8e8a9566a02e7f66faff8d6f89e",
  },
  blaze: {
    boss: "Inferno Demonlord",
    head: "/head/b20657e24b56e1b2f8fc219da1de788c0c24f36388b1a409d0cd2d8dba44aa3b",
  },
  vampire: {
    boss: "Riftstalker Bloodfiend",
    head: "/head/5aa29ea961757dc3c90bfabf302c5abe9d308fb4a7d3864e5788ad2cc9160aa2"
  }
};

const seaCreatures = [ 
  "pond_squid",
  "plhlegblast",
  "sea_walker",
  "night_squid",
  "frozen_steve",
  "sea_guardian",
  "frosty_the_snowman",
  "scarecrow",
  "nurse_shark",
  "sea_witch",
  "sea_archer",
  "oasis_rabbit",
  "oasis_sheep",
  "monster_of_the_deep",
  "grinch",
  "blue_shark",
  "catfish",
  "nightmare",
  "carrot_king",
  "water_worm",
  "sea_leech",
  "poisoned_water_worm",
  "flaming_worm",
  "magma_slug",
  "baby_magma_slug",
  "nutcracker",
  "moogma",
  "lava_leech",
  "pyroclastic_worm",
  "lava_flame",
  "fire_eel",
  "pig_rider",
  "guardian_defender",
  "werewolf",
  "deep_sea_protector",
  "tiger_shark",
  "lava_blaze",
  "lava_pigman",
  "water_hydra",
  "sea_emperor",
  "phantom_fisherman",
  "great_white_shark",
  "zombie_miner",
  "yeti",
  "grim_reaper",
  "thunder",
  "lord_jawbus", 
  "agarimoo"
];

const milestone_rarities = ["common", "uncommon", "rare", "epic", "legendary"];

const pet_milestones = {
  sea_creatures_killed: [250, 1000, 2500, 5000, 10000],
  ores_mined: [2500, 7500, 20000, 100000, 250000],
};

const skillEmojis = {
  alchemy: "⚗️",
  carpentry: "🪑",
  combat: "⚔️",
  enchanting: "🔮",
  farming: "🌾",
  fishing: "🎣",
  foraging: "🌳",
  mining: "⛏️",
  runecrafting: "✨",
  social: "💬",
  taming: "🦴",
  dungeons: "💀",
  archer: "🏹",
  berserk: "🗡️",
  healer: "🚑",
  mage: "🧙🏽",
  tank: "🛡️",
};

const slayerEmojis = {
  zombie: "🧟",
  spider: "🕸️",
  wolf: "🐺",
  enderman: "🔮",
  blaze: "🔥",
  vampire: "🩸"
};

const KUUDRA = {
  head: "1f0239fb498e5907ede12ab32629ee95f0064574a9ffdff9fc3a1c8e2ec17587",
}
/*
.########.##.....##.##....##..######..########.####..#######..##....##..######.
.##.......##.....##.###...##.##....##....##.....##..##.....##.###...##.##....##
.##.......##.....##.####..##.##..........##.....##..##.....##.####..##.##......
.######...##.....##.##.##.##.##..........##.....##..##.....##.##.##.##..######.
.##.......##.....##.##..####.##..........##.....##..##.....##.##..####.......##
.##.......##.....##.##...###.##....##....##.....##..##.....##.##...###.##....##
.##........#######..##....##..######.....##....####..#######..##....##..######.
*/
function formatNucleusCrystal(crystal, state) {
  if (!state) {
    state = 'NOT_FOUND'
  }
  let formatted = state.split('_').join(' ').trim()
  formatted = helper.titleCase(formatted)

  let color = 'f';
  switch (state) {
    case 'NOT_FOUND':
      color = 'c'
      break;
    case 'FOUND':
      color = 'e'
      break;
    case 'PLACED':
      color = 'a'
      break;
  }

  // Jasper and Ruby do not have a PLACED state
  if (['jasper', 'ruby'].includes(crystal) && state === 'FOUND') {
    color = 'a'
  }

  return `<span style='color: var(--§${color});'>${formatted}</span>`
}

function romanize(num) {
	if (!+num)
		return false;
	var	digits = String(+num).split(""),
		key = ["","C","CC","CCC","CD","D","DC","DCC","DCCC","CM",
		     "","X","XX","XXX","XL","L","LX","LXX","LXXX","XC",
		     "","I","II","III","IV","V","VI","VII","VIII","IX"],
		roman = "",
		i = 3;
	while (i--)
		roman = (key[+digits.pop() + (i * 10)] || "") + roman;
	return Array(+digits.join("") + 1).join("M") + roman;
};

function formatReforge(string) {
  let reforge = string.split('_').join(' ').trim()
  reforge = reforge.charAt(0).toUpperCase() + reforge.slice(1)
  return reforge
}

function formatEnrichment(string) {
  let enrichment = string.split('_').join(' ').trim()
  enrichment = helper.titleCase(enrichment)
  return enrichment
}

function enrichmentToStatName(enrichment) {
  switch (enrichment) {
    case 'walk_speed':
      return 'speed'

    case 'critical_chance':
      return 'crit_chance'

    case 'critical_damage':
      return 'crit_damage'

    case 'attack_speed':
      return 'bonus_attack_speed'

    default:
      return enrichment
  }
}

function getEnrichments(accessories) {
  const enrichmentCounts = {}
  const filteredAccessories = accessories
    .filter(acc => ['legendary', 'mythic', 'divine', 'special', 'very_special'].includes(acc.rarity?.toLowerCase()))

  if (filteredAccessories.length > 0) {
    filteredAccessories.forEach(acc => {
      const enrichment = acc.enrichment || 'missing_enrichment!'

      if (!enrichmentCounts[enrichment]) {
        enrichmentCounts[enrichment] = 0
      }
      enrichmentCounts[enrichment] += 1
    })

    %>
<span class="stat-name">Enrichments: </span>
<%
    for (const [enrichment, amount] of Object.entries(enrichmentCounts)) {
      const stat = enrichmentToStatName(enrichment)
      %>
<span class="stat-value color-<%= stat.replaceAll("_", "-") %>">
  <%= amount %>× <%= formatEnrichment(enrichment) %>
</span>
<%
      if (enrichment !== Object.keys(enrichmentCounts).pop()) {
        %><span class="bonus-divider" role="separator"> // </span><%
      }
    }
    %>
<%
  }
}

function isEnchanted(item) {
  // heads
  if ([397].includes(item.id)) {
    return false;
  }

  // enchanted book, bottle o' enchanting, nether star
  if ([403, 384, 399].includes(item.id)) {
    return true;
  }

  // potions potions with actual effects (not water bottles)
  if (item.id === 373 && item.Damage !== 0) {
    return true;
  }

  if ("tag" in item && Array.isArray(item.tag.ench)) {
    return true;
  }

  if (item.glowing) {
    return true;
  }

  return false;
}

function itemIcon(item, classes) {
  %>
<div <% if(item.texture_path){ %> style='background-image: url("<%= item.texture_path %>")' <% } %> class="
      <%= classes.join(" ") %>
      item-icon
      <% if(isEnchanted(item)){ %>is-enchanted <% } %>
      <% if(item.texture_path){ %>custom-icon<% } %>
      <% if(item.Damage != 0){ %>icon-<%= item.id %>_0<% } %>
      icon-<%= item.id %>_<%= item.Damage %>
    ">
</div>
<%
}

function jerriefy(rank) {
  if (extra.isFoolsDay) {
    rank = rank.replace("VIP", "JER");
    rank = rank.replace("MVP", "JRY");
    rank = rank.replace("HELPER", "JERRY");
    rank = rank.replace("MOD", "JERRY");
    rank = rank.replace("PIG", "JERRY");
    rank = rank.replace("ADMIN", "SR JERRY");
    rank = rank.replace("YOUTUBE", "YERRY");
  }
  return rank;
}

function getRarityUpgradeClass(item) {
  let upgrades = 0

  upgrades += item.extra?.recombobulated ? 1 : 0
  upgrades += item.heldItem === 'PET_ITEM_TIER_BOOST' && !item.ignoresTierBoost ? 1 : 0
  upgrades += item.heldItem === 'PET_ITEM_VAMPIRE_FANG' ? 1 : 0
  upgrades += item.heldItem === 'PET_ITEM_TOY_JERRY' ? 1 : 0

  return upgrades > 0 ? `piece-rarity-upgrade-${upgrades}` : ''
}

function getMetaTitle() {
	let metaTitle = calculated.display_name

	if (calculated.display_emoji) {
		metaTitle += calculated.display_emoji
	}

  switch (calculated.profile.game_mode) {
    case 'ironman':
      metaTitle += ` (${calculated.profile.cute_name}♻️)`
      break;

    case 'bingo':
      metaTitle += ` (${calculated.profile.cute_name}🎲)`
      break;

    case 'island':
      metaTitle += ` (${calculated.profile.cute_name}🌴)`
      break;

    default:
		  metaTitle += ` (${calculated.profile.cute_name})`
      break;
  }

	return metaTitle
}

function getMetaDescription() {
	const description = []
	const highestRaritySword = getHighestRaritySword()

	// Base
	description.push(
		`${calculated.display_name} has been playing SkyBlock for ${moment(
			calculated.first_join.unix
		).fromNow(true)}`
	)

	// Armor set
	if (items.armor_set) {
		description.push(
			highestRaritySword
				? `, is wearing ${items.armor_set}`
				: ` and is wearing ${items.armor_set}`
		)
	}

	// Sword
	if (highestRaritySword) {
		description.push(
			items.armor_set
				? ` and fighting with ${helper.aOrAn(
						highestRaritySword
				  )} ${highestRaritySword}`
				: ` and is fighting with ${helper.aOrAn(
						highestRaritySword
				  )} ${highestRaritySword}`
		)
	}

	description.push('.')

	return description.join('')
}

function getDescription() {
	const description = []

	// Fairy souls
	description.push(
		`🧚 ${calculated.fairy_souls.collected}/${calculated.fairy_souls.total} Fairy Souls`,
		'\n'
	)

	// Armor
	if (items.armor_set) {
		description.push(`🛡️ ${items.armor_set}`, '\n')
	}

	// Sword
	const highestRaritySword = getHighestRaritySword()
	if (highestRaritySword) {
		description.push(`🗡️ ${highestRaritySword}`, '\n')
	}

	// Skills
	if ('levels' in calculated) {
		let { levels } = calculated

		let skillsSorted = Object.keys(levels).sort(
			(a, b) =>
				levels[b].level +
				levels[b].progress -
				(levels[a].level + levels[a].progress)
		)

		const skillAmount =
			calculated.pets.filter((a) => a.active).length >= 1 ? 1 : 2

		for (let i = 0; i < skillAmount; i++) {
			const skill = skillsSorted[i]
			const skillName = skill.charAt(0).toUpperCase() + skill.slice(1)

			if (levels[skill].level == 0) {
				break
			}

			description.push(
				`${skillEmojis[skill]} ${skillName} ${levels[skill].level}`,
				'\n'
			)
		}
	}

	// Pet
	if (calculated.pets.filter((a) => a.active).length >= 1) {
		const activePet = calculated.pets.find((a) => a.active)

		description.push(
			`${activePet.emoji} ${helper.titleCase(activePet.rarity)} ${
				activePet.display_name
			} (Lvl ${activePet.level.level})`,
			'\n'
		)
	}

	// Line break
	description.push('\n')

	// Slayers
	if (calculated.slayer_coins_spent.total > 0) {
		description.push('🤺 Slayer: ')

		for (const slayer of slayerOrder) {
			if (!calculated.slayers[slayer]) {
				continue
			}

			const slayerInfo = calculated.slayers[slayer]
			description.push(
				`${slayerEmojis[slayer]} ${slayerInfo.level.currentLevel}  `
			)
		}
		description.push('\n')
	}

  // Dungeons
  if ('dungeons' in calculated && calculated.dungeons.catacombs?.level?.level > 0) {
    const line = []

    if (calculated.dungeons.catacombs?.level) {
      line.push(`${skillEmojis["dungeons"]} Catacombs: ${calculated.dungeons.catacombs.level.level}`)
    }

    if (calculated.dungeons.classes) {
      const classesLine = []
      for (const [dclass, data] of Object.entries(calculated.dungeons.classes)) {
        classesLine.push(`${skillEmojis[dclass]} ${data.experience?.level ?? 0}`)
      }
      line.push(`(${classesLine.join('  ')})`)
    }

    description.push(line.join(' '), '\n', '\n')
  }

  // Skyblock Level
  if (calculated.skyblock_level.xp !== 0 && calculated.skyblock_level.level !== 0) {
    description.push(
      `🌟 Skyblock Level: ${calculated.skyblock_level.level + calculated.skyblock_level.progress}`,
      '\n'
    )
  }



	if (calculated.average_level || calculated.dungeons.class_average) {
    // Skill Average
    if (calculated.average_level) {
      description.push(
        `📚 Avg Skill Level: ${
          Math.floor(calculated.average_level * 10) / 10
        } `
      )
    }

    // Dungeons classs average
    if (calculated.dungeons.class_average) {
      description.push(
        `⚔️  Avg Class Level: ${
          Math.floor(calculated.dungeons.class_average.avrg_level_with_progress * 10) / 10
        } `
      )
    }

    description.push('\n')
	}

	// Weights
	if (calculated.weight) {
		description.push(
			`💪 Senither Weight: ${Math.floor(
				calculated.weight.senither.overall
			).toLocaleString()} `,
			`💪 Lily Weight: ${Math.floor(
				calculated.weight.lily.total
			).toLocaleString()}`
		)
		description.push('\n')
	}

	// Networth, Bank & purse
  if (calculated.networth.noInventory === false) {
      description.push(
        `💸 Networth: ${helper.formatNumber(calculated.networth.networth, true)} `
      )
  }

	if (calculated.bank) {
		description.push(
			`🏦 Bank: ${helper.formatNumber(calculated.bank, true)} `
		)
	}
	description.push(
    `💰 Purse: ${helper.formatNumber(calculated.purse, true)}`
  )

  // Done!
	return description.join('')
}

function getHighestRaritySword() {
	let highestRaritySword

	if (!items.highest_rarity_sword) {
		return highestRaritySword
	}

	highestRaritySword = items.highest_rarity_sword.display_name

	if (items.highest_rarity_sword?.tag?.ExtraAttributes?.id == 'MIDAS_SWORD') {
		highestRaritySword = highestRaritySword.replace(
			'Midas',
			`${helper.formatNumber(
				items.highest_rarity_sword.tag.ExtraAttributes.winning_bid,
				true,
				1
			)} Midas`
		)
	}

	return highestRaritySword
}

function formatSlayerCoinsSpent(coins) {
  return `${helper.formatNumber(coins / 2, true)} – ${helper.formatNumber(coins, true)}`
}

/*
..######...########.##....##.########.########.....###....########.########.########.
.##....##..##.......###...##.##.......##.....##...##.##......##....##.......##.....##
.##........##.......####..##.##.......##.....##..##...##.....##....##.......##.....##
.##...####.######...##.##.##.######...########..##.....##....##....######...##.....##
.##....##..##.......##..####.##.......##...##...#########....##....##.......##.....##
.##....##..##.......##...###.##.......##....##..##.....##....##....##.......##.....##
..######...########.##....##.########.##.....##.##.....##....##....########.########.
*/
const metaTitle = getMetaTitle()
const description = getDescription()
const metaDescription = getMetaDescription()

%>
<!DOCTYPE html>
<html lang="en">

<head>
  <title><%= calculated.display_name %><% if(calculated.display_emoji){ %> <%= calculated.display_emoji %><% } %> | SkyCrypt</title>
  <meta name="description" content="<%= metaDescription %>">
  <link rel="icon" href="https://crafatar.com/avatars/<%= extra.isFoolsDay ? 'bd482739767c45dca1f8c33c40530952' : calculated.uuid %>?size=32&overlay" sizes="32x32" type="image/png">
  <meta property="og:type" content="profile">
  <meta property="og:title" content="<%= metaTitle %>">
  <meta property="og:image" content="https://crafatar.com/avatars/<%= calculated.uuid %>?size=512&overlay">
  <meta property="og:description" content="<%= description %>">
  <meta property="og:profile:username" content="<%= calculated.display_name %>">
  <meta name="twitter:card" content="summary">
  <%- include('../includes/resources') %>
</head>

<body class="page-stats">
  <svg xmlns="http://www.w3.org/2000/svg" height="0" width="0" style="position: fixed;">
    <filter id="enchanted-glint">
      <feImage href="/resources/img/enchanted-glint.png" />
      <feComposite in2="SourceGraphic" operator="in" />
      <feBlend in="SourceGraphic" mode="screen" />
    </filter>
  </svg>
  <%- include('../includes/header') %>
  <div id="dimmer">
    <video preload="none" id="enable_api" loop>
      <source type="video/webm" src="/resources/video/enable-api.webm" />
      <source type="video/mp4" src="/resources/video/enable-api.mp4" />
    </video>
  </div>
  <div id="stats_content">
    <div class="item-name">
      <div class="stats-piece-icon__wrapper">
        <div class="stats-piece-icon"></div>
      </div>
      <p class="item-name__name"></p>
      <button class="close-lore" aria-label="Close"></button>
    </div>
    <div class="item-lore"></div>
    <inventory-view class="backpack-contents" preview></inventory-view>
  </div>
  <div id="skin_display">
    <div id="player_model"></div>
  </div>
  <main id="wrapper" data-sticky-container>
    <% if(extra.cacheOnly) { %>
    <figure class="banner error">
      <figcaption>Cache Only Mode!</figcaption>
      <p>
        SkyCrypt is <strong>only</strong> showing the last known state of user's profiles which may be outdated due to API maintenance.<br>
        <%# <i>If a profile wasn't viewed/cached before, it can't be viewed.</i><br> %>
        <br>
        For more info about Hypixel outages visit the official <a href="https://status.hypixel.net/" target="_blank" rel="noreferrer"> Hypixel Status</a>.
      </p>
    </figure>
    <% } %>
    <div id="player_profile"><span class="text-stats-for">Stats for</span>
      <span tabindex="0" id="stats_for_player">
        <%- jerriefy(calculated.rank_prefix) %>
        <%= calculated.display_name %>
        <% if(calculated.display_emoji_img){ %>
        <img class="emoji" draggable="false" src="<%= calculated.display_emoji_img %>">
        <% }else if(calculated.display_emoji){ %>
        <%- extra.twemoji.parse(calculated.display_emoji) %>
        <% } %>
        <ul id="other_players">
          <% calculated.members.forEach(member => { %>
          <li>
            <a class="goto" href="/stats/<%= member.uuid %>/<%= calculated.profile.profile_id %><%= Object.keys(req.query).length > 0 ? '?' + new URLSearchParams(req.query).toString() : '' %>">
              <%= member.display_name %>
              <% if(member.emojiImg){ %>
              <img class="emoji" draggable="false" src="<%= member.emojiImg %>">
              <% }else if(member.emoji){ %>
              <%- extra.twemoji.parse(member.emoji) %>
              <% } %>
            </a>
          </li>
          <% }); %>
        </ul>
      </span>
      <span class="text-on"> on </span>
      <span tabindex="0" id="stats_for_profile">
        <%= calculated.profile.cute_name %>
        <% if (calculated.profile.game_mode == 'ironman') { %>
        <img src="/resources/img/icons/ironman.png" class="emoji" alt="ironman">
        <% } %>
        <% if (calculated.profile.game_mode == 'bingo') { %>
        <%- extra.twemoji.parse("🎲") %>
        <% } %>
        <% if (calculated.profile.game_mode == 'island') { %>
        <%- extra.twemoji.parse("🌴") %>
        <% } %>
        <ul id="other_profiles">
          <% for(let profile_id in calculated.profiles){ %>
          <% let _profile = calculated.profiles[profile_id]; %>
          <li>
            <a class="goto" href="/stats/<%= calculated.uuid %>/<%= _profile.profile_id %><%= Object.keys(req.query).length > 0 ? '?' + new URLSearchParams(req.query).toString() : '' %>">
              <%= _profile.cute_name %>
              <% if (_profile.game_mode == 'ironman') { %>
              <img src="/resources/img/icons/ironman.png" class="emoji">
              <% } %>
              <% if (_profile.game_mode == 'bingo') { %>
              <%- extra.twemoji.parse("🎲") %>
              <% } %>
              <% if (_profile.game_mode == 'island') { %>
              <%- extra.twemoji.parse("🌴") %>
              <% } %>
            </a>
          </li>
          <% } %>
        </ul>
      </span>
      <div id="additional_player_stats">
        <button class="additional-player-stat svg-icon favorite" data-username="<%= calculated.uuid %>" role="checkbox">
          <svg viewBox="0 0 24 24">
            <title>star</title>
            <path class="solid" fill="white" d="M12,17.27L18.18,21L16.54,13.97L22,9.24L14.81,8.62L12,2L9.19,8.62L2,9.24L7.45,13.97L5.82,21L12,17.27Z" />
            <path class="outline" fill="white" d="M12,15.39L8.24,17.66L9.23,13.38L5.91,10.5L10.29,10.13L12,6.09L13.71,10.13L18.09,10.5L14.77,13.38L15.76,17.66M22,9.24L14.81,8.63L12,2L9.19,8.63L2,9.24L7.45,13.97L5.82,21L12,17.27L18.18,21L16.54,13.97L22,9.24Z" />
          </svg>
        </button>
        <% if(calculated.guild){ %><button class="additional-player-stat interactive-tooltip" data-tippy-content="
        <% if(calculated.guild.rank){ %><span class='stat-name'>Rank: </span><span class='stat-value'><%= calculated.guild.rank %></span><br><br><% } %>
        <span class='stat-name'>Guild Master: </span><% if(calculated.guild.gm) {%> <a href='/stats/<%= calculated.guild.gm %>' class='no-underline stat-value'><%= calculated.guild.gmUser.display_name %><%} else { %>None<% } %></a><br>
        <% if(calculated.guild.tag){ %><span class='stat-name'>Tag: </span><span class='stat-value'><%- helper.renderLore('§f'+calculated.guild.tag) %></span><br><% } %>
        <% if(calculated.guild.members){ %><span class='stat-name'>Members: </span><span class='stat-value'><%= calculated.guild.members %></span><br><% } %>
        <% if(calculated.guild.level){ %><span class='stat-name'>Level: </span><span class='stat-value'><%= calculated.guild.level %></span><br><% } %>
        ">Guild: <%= calculated.guild.name %></button><% } %>
        <a href="https://plancke.io/hypixel/player/stats/<%= calculated.display_name %>" target="_blank" rel="noreferrer" class="additional-player-stat external-link">Plancke</a>
        <div id="additional_socials">
          <button data-copy-text="<%= calculated.uuid %>" class="copy-text additional-player-stat">Copy UUID</button>
          <% if('DISCORD' in calculated.social){ %><button data-copy-text="<%= calculated.social.DISCORD %>" class="additional-player-stat copy-text external-discord external-icon"><%= calculated.social.DISCORD %></button><% } %>
          <% if('TWITTER' in calculated.social){ %><a data-tippy-content="Twitter" href="<%= calculated.social.TWITTER %>" target="_blank" rel="noreferrer" class="additional-player-stat external-link external-icon external-twitter"></a><% } %>
          <% if('YOUTUBE' in calculated.social){ %><a data-tippy-content="YouTube" href="<%= calculated.social.YOUTUBE %>" target="_blank" rel="noreferrer" class="additional-player-stat external-link external-icon external-youtube"></a><% } %>
          <% if('INSTAGRAM' in calculated.social){ %><a data-tippy-content="Instagram" href="<%= calculated.social.INSTAGRAM %>" target="_blank" rel="noreferrer" class="additional-player-stat external-link external-icon external-instagram"></a><% } %>
          <% if('TWITCH' in calculated.social){ %><a data-tippy-content="Twitch" href="<%= calculated.social.TWITCH %>" target="_blank" rel="noreferrer" class="additional-player-stat external-link external-icon external-twitch"></a><% } %>
          <% if('HYPIXEL' in calculated.social){ %><a data-tippy-content="Hypixel Forums" href="<%= calculated.social.HYPIXEL %>" target="_blank" rel="noreferrer" class="additional-player-stat external-link external-icon external-hypixel"></a><% } %>
          <button class="additional-player-stat" id="reveal_socials" aria-label="reveal socials"></button>
        </div>
      </div>
    </div>
    <% if(calculated.uuid == "b876ec32e396476ba1158438d83c67d4") { %>
    <div id="techno-support">
      <span class="support-title">Thank you for everything, Technoblade.</span><br>
      <p class="support-text">
        If you can, <a href="https://www.curesarcoma.org/donate/" target="_blank">donate</a> to the Sarcoma Foundation of America and <a href="https://technoblade.com/" target="_blank">buy</a> his merch.
      </p>
    </div>
    <% } %>
    <div id="basic_stats">
      <%
        let sword = items.weapons.slice().sort((a, b) => a.item_index - b.item_index);
        let rod = items.fishing_tools.slice().sort((a, b) => a.item_index - b.item_index);

        if (items.highest_rarity_sword) {
          sword = [items.highest_rarity_sword];
        }

        if (items.highest_rarity_fishing_tool) {
          rod = [items.highest_rarity_fishing_tool];
        }
      %>

      <div id="skin_display_mobile"></div>

      <div id="base_stats_wrapper">
        <div id="base_stats_container"></div>
        <button id="show_stats">Show Stats</button>
      </div>

      <div id="additional_stats_container">
        <% if(calculated.current_area){ %>
        <div class="additional-stat"><span class="stat-name"><%= calculated.current_area_updated ? 'Current' : 'Last' %> Area: </span><span class="stat-value"><%= calculated.current_area %></span></div>
        <% } %>
        <div class="additional-stat"><span data-tippy-content='Joined on <local-time timestamp="<%= calculated.first_join.unix %>"></local-time>'><span class="stat-name">Joined: </span><span class="stat-value"><%= calculated.first_join.text %></span></span></div>
        <div class="additional-stat"><span class="stat-name">Purse: </span><span class="stat-value"><%= helper.formatNumber(calculated.purse, true) %> Coin<%= Math.floor(calculated.purse) == 1 ? '': 's' %></span></div>
        <% if('bank' in calculated){ %>
        <div class="additional-stat"><span class="stat-name">Bank Account: </span><span class="stat-value"><%= helper.formatNumber(calculated.bank, true) %> Coin<%= Math.floor(calculated.bank) == 1 ? '': 's' %></span></div>
        <% } %>
        <% if('levels' in calculated && 'runecrafting' in calculated.levels){ %>
        <div class="additional-stat"><span data-tippy-content="
          <span class='stat-name'>Total Skill XP: </span><span class='stat-value'><%= Math.round(calculated.total_skill_xp).toLocaleString() %></span>
          <div class='tippy-explanation'>Total XP gained in all skills except Social and Runecrafting.</div>
          <span class='stat-name'>Average Level: </span><span class='stat-value'><%= calculated.average_level.toFixed(2) %></span>
          <div class='tippy-explanation'>Average skill level over all skills except Social and Runecrafting<% if('runecrafting' in calculated.levels){ %>, includes progress to next level<% } %>.</div><% if('runecrafting' in calculated.levels){ %><span class='stat-name'>Average Level without progress: </span><span class='stat-value'><%= calculated.average_level_no_progress.toFixed(2) %></span>
          <div class='tippy-explanation'>Average skill level without including partial level progress.</div><% } %>
          "><span class="stat-name">Average Skill Level: </span><span class="stat-value"><%= calculated.average_level.toFixed(2) %></span></span></div>
        <% } %>
        <div class="additional-stat">
          <span data-tippy-content="<%= (calculated.fairy_souls.progress*100).toFixed(2) %>% of fairy souls found."><span class="stat-name">Fairy Souls: </span><span class="stat-value"><%= calculated.fairy_souls.collected %> / <%= calculated.fairy_souls.total %></span></span>
        </div>
        <%
          const weightSystems = [
            {
              name: "Senither Weight",
              author: "Senither",
              skill: calculated.weight.senither.skill.total,
              slayer: calculated.weight.senither.slayer.total,
              dungeon: calculated.weight.senither.dungeon.total,
              total: calculated.weight.senither.overall,
            },
            {
              name: "Lily Weight",
              author: "LappySheep",
              skill: calculated.weight.lily.skill.base + calculated.weight.lily.skill.overflow,
              slayer: calculated.weight.lily.slayer,
              dungeon: calculated.weight.lily.catacombs.experience + calculated.weight.lily.catacombs.completion.base + calculated.weight.lily.catacombs.completion.master,
              total: calculated.weight.lily.total,
            },
          ];
        if (calculated.weight) {
          for (weight of weightSystems) { 
            // set weight to 0 if skills API is off (due to skill wipes & incorrect calculation)
            if ('runecrafting' in calculated.levels === false) {
              weight.total -= weight.skill;
              weight.skill = 0;
            } %>

            <div class="additional-stat">
              <span data-tippy-content="
                <span class='stat-name'><%= weight.name %></span><br>
                <span class='stat-info'>Weight calculations by <%= weight.author %></span>
                <br/><br/>
                <span class='stat-name'>Skill: </span>
                <span class='stat-value'>
                  <%= parseFloat(weight.skill.toFixed(2)).toLocaleString() %>
                </span><br/>
                <span class='stat-name'>Slayer: </span>
                <span class='stat-value'>
                  <%= parseFloat(weight.slayer.toFixed(2)).toLocaleString() %>
                </span><br/>
                <span class='stat-name'>Dungeon: </span>
                <span class='stat-value'>
                  <%= parseFloat(weight.dungeon.toFixed(2)).toLocaleString() %>
                </span><br/><br/>
                <span class='stat-name'>Total: </span>
                <span class='stat-value'>
                  <%= parseFloat(weight.total.toFixed(2)).toLocaleString() %>
                </span>
              ">
              <span class="stat-name"><%= weight.name %>: </span>
              <span class="stat-value"><%= parseFloat(Math.round(weight.total)).toLocaleString() %></span></span>
            </div>
          <% } %>
        <% } %>
        <% if (!calculated.networth.noInventory) {%>
        <div class="additional-stat">
          <span data-tippy-content="
          <span class='stat-name'><%= 'Networth' %></span><br>
          <span class='stat-info'>Networth calculations by SkyHelper</span>
          <br/><br/>

          <%
          const networth_values = {
            purse: "Purse",
            bank: "Bank",
            sacks: "Sacks",
            armor: "Armor",
            equipment: "Equipment",
            wardrobe: "Wardrobe",
            inventory: "Inventory",
            enderchest: "Ender Chest",
            accessories: "Accessories",
            personal_vault: "Personal Vault",
            storage: "Storage",
            pets: "Pets",
            fishing_bag: "Fishing Bag",
            potion_bag: "Potion Bag",
            candy_inventory: "Candy Bag"
          }

          for (const [key, name] of Object.entries(networth_values)) {
            let value = key == "sacks" ? parseFloat(((calculated.networth.types.sacks?.total ?? 0) + (calculated.networth.types.essence?.total ?? 0)).toFixed(2)) :
                        key == "purse" ? parseFloat((calculated.purse ?? 0).toFixed(2)) :
                        key == "bank" ? parseFloat((calculated.bank ?? 0).toFixed(2)) :
                        parseFloat((calculated.networth.types[key]?.total ?? 0).toFixed(2));

            if (value > 0) { %>
              <span class='stat-name'><%= name %>: </span>
              <span class='stat-value'>
              <%= helper.formatNumber(value) %>
              </span><br/>
            <% } %>
          <% } %>
          <br/>
          <span class='stat-name'>Unsoulbound Networth: </span>
          <span class='stat-value'>
          <%= helper.formatNumber(parseFloat(calculated.networth.unsoulboundNetworth.toFixed(2))) %></span>
          </span><br/>
          <span class='stat-name'>Total Networth: </span>
          <span class='stat-value'>
          <%= Math.floor(calculated.networth.networth).toLocaleString() %> (<%= helper.formatNumber(parseFloat(calculated.networth.networth.toFixed(2))) %>)</span>
          </span><br/>
        ">
            <span class="stat-name">Networth: </span>
            <span class="stat-value"><%= helper.formatNumber(parseFloat(Math.round(calculated.networth.networth))) %></span></span>
        </div>
        <% } %>
      </div>
      <div id="skill_levels_container">
        <% if (calculated.skyblock_level.xp !== 0 && calculated.skyblock_level.level !== 0) {%>
        <div class="skill-bars">
          <skill-component skill="level" type="skyblock_level" icon="<%= skillItems.skyblock_level%>"></skill-component>
        </div>
        <% } %>
        <% if ('levels' in calculated) { %>
        <div class="skill-bars" data-api-enabled="<%= 'runecrafting' in calculated.levels %>">
          <skill-component skill="taming" type="skill" icon="<%= skillItems.taming %>"></skill-component>
          <skill-component skill="farming" type="skill" icon="<%= skillItems.farming %>"></skill-component>
          <skill-component skill="mining" type="skill" icon="<%= skillItems.mining %>"></skill-component>
          <skill-component skill="combat" type="skill" icon="<%= skillItems.combat %>"></skill-component>
          <skill-component skill="foraging" type="skill" icon="<%= skillItems.foraging %>"></skill-component>
          <skill-component skill="fishing" type="skill" icon="<%= skillItems.fishing %>"></skill-component>
          <skill-component skill="enchanting" type="skill" icon="<%= skillItems.enchanting %>"></skill-component>
          <skill-component skill="alchemy" type="skill" icon="<%= skillItems.alchemy %>"></skill-component>
          <skill-component skill="carpentry" type="skill" icon="<%= skillItems.carpentry %>"></skill-component>
          <% if ('runecrafting' in calculated.levels) { %>
          <skill-component skill="runecrafting" type="skill" icon="<%= skillItems.runecrafting %>"></skill-component>
          <skill-component skill="social" type="skill" icon="<%= skillItems.social %>"></skill-component>
          <% } else { %>
          <div class="no-access">Skills from achievements across profiles. <a target="_blank" class="enable-api" href="/resources/video/enable-api.mp4">Enable Skills API</a> for more accurate data.</div>
          <% } %>
        </div>
        <% } else { %>
        <div class="no-access"><%= calculated.display_name %> doesn't have skills access via API enabled. <a target="_blank" class="enable-api" href="/resources/video/enable-api.mp4">See here</a> how to enable full API access.</div>
        <% } %>
      </div>
    </div>
    <div id="nav_bar">
      <div id="nav_bar_line"></div>
      <div id="nav_bar_background"></div>
      <div id="nav_items_container">
        <a class="nav-item" href="#Armor">Armor</a>
        <% if(!items.no_inventory){ %><a class="nav-item" href="#Weapons">Weapons</a><% } %>
        <% if(!items.no_inventory){ %><a class="nav-item" href="#Accessories">Accessories</a><% } %>
        <% if(calculated.pets.length > 0){ %><a class="nav-item" href="#Pets">Pets</a><% } %>
        <% if(!items.no_inventory){ %><a class="nav-item" href="#Inventory">Inventory</a><% } %>
        <a class="nav-item" href="#Skills">Skills</a>
        <a class="nav-item" href="#Dungeons">Dungeons</a>
        <a class="nav-item" href="#Slayer">Slayer</a>
        <a class="nav-item" href="#Minions">Minions</a>
        <% if (calculated.bestiary?.categories){ %><a class="nav-item" href="#Bestiary">Bestiary</a><% } %>
        <% if(Object.keys(calculated.collections).length > 0){ %><a class="nav-item" href="#Collections">Collections</a><% } %>
        <% if(Object.keys(calculated.crimsonIsles.kuudra_completed_tiers).length > 0 || Object.keys(calculated.crimsonIsles.dojo).length > 0){ %><a class="nav-item" href="#Crimson_Isle">Crimson Isle</a><% } %>
        <% if(calculated.rift !== null){ %><a class="nav-item" href="#Rift"><abbr title="RIft">Rift</abbr></a><% } %>
        <% if(Object.keys(calculated.misc).length > 0){ %><a class="nav-item" href="#Misc"><abbr title="Miscellaneous">Misc</abbr></a><% } %>
      </div>
    </div>
    <div class="stat-containers">
      <%
      const notAvailable = [];

      if(items.no_inventory)
        notAvailable.push('Weapons', 'Accessories', 'Inventory', 'Storage');

      if(items.no_personal_vault)
        notAvailable.push('Personal Vault');

      if(Object.keys(calculated.collections).length == 0)
        notAvailable.push('Collections');
    %>
      <% if (notAvailable.length > 0 || ['ironman', 'bingo', 'island'].includes(calculated.profile.game_mode)) { %>
      <div class="stat-container info-container-wrapper">
        <div class="info-container">
          <div class="info-header">Notice</div>
          <% if(notAvailable.length > 0){ %>
          <%= notAvailable.join(', ') %> not available for <%= calculated.display_name %> due to limited API access.<br><span><a target="_blank" class="enable-api" href="/resources/video/enable-api.mp4">See here</a> how to enable full API access.</span>
          <% } %>
          <% if(calculated.profile.game_mode == 'ironman'){ %>
          <% if(notAvailable.length > 0){ %><br><br><% } %>
          This is an <strong>Ironman</strong> profile. The player cannot use the auction house, bazaar, trade, or pick up drops from other players.
          <% } %>
          <% if(calculated.profile.game_mode == 'bingo'){ %>
          <% if(notAvailable.length > 0){ %><br><br><% } %>
          This is a <strong>Bingo</strong> profile. The player cannot spend gems, use the auction house, bazaar, trade, or pick up drops from other players.
          <% } %>
          <% if(calculated.profile.game_mode == 'island'){ %>
          <% if(notAvailable.length > 0){ %><br><br><% } %>
          This is a <strong>Stranded</strong> profile. The player cannot leave their skyblock island or trade with other players.
          <% } %>
        </div>
      </div>
      <% } %>

      <div class="stat-container stat-armor">
        <a class="stat-anchor" id="Armor"></a>
        <h2 class="stat-header">Armor</h2>
        <div class="stat-content">
          <% if(items.armor.length == 0){ %>
          <div class="no-access"><%= calculated.display_name %> doesn't have any armor equipped.</div>
          <% }else{ %>
          <% if(items.armor_set) { %>
          <p class="stat-raw-values">
            <span class="stat-name">Set: </span><span class="stat-value piece-<%= items.armor_set_rarity %>-fg"><%= items.armor_set %></span>
          </p>
          <% } %>
          <div class="pieces">
            <% for(const item of items.armor.slice().reverse()){ %>
            <div tabindex="0" data-item-id="<%= item.itemId %>" class="rich-item piece piece-<%= item.rarity %>-bg <%= getRarityUpgradeClass(item) %>">
              <% if(rarityOrder.indexOf(item.rarity) <= 4){ %>
              <div class="piece-shine"></div>
              <% } %>
              <% itemIcon(item, ['piece-icon']); %>
            </div>
            <% } %>
            <div data-bonus-stats="armor"></div>
          </div>
          <% } %>
          <p class="stat-sub-header">Equipment</p>
          <% if(Object.keys(items.equipment).length == 0){ %>
          <div class="no-access"><%= calculated.display_name %> doesn't have any equipment equipped.</div>
          <% }else{ %>
          <div class="pieces">
            <% for(const item of items.equipment.slice().reverse()){ %>
            <div tabindex="0" data-item-id="<%= item.itemId %>" class="rich-item piece piece-<%= item.rarity %>-bg <%= getRarityUpgradeClass(item) %>">
              <% if(rarityOrder.indexOf(item.rarity) <= 4){ %>
              <div class="piece-shine"></div>
              <% } %>
              <% itemIcon(item, ['piece-icon']); %>
            </div>
            <% } %>
            <div data-bonus-stats="equipment"></div>
          </div>
          <% } %>
        </div>
      </div>
      <% if(items.wardrobe.length > 0){ %>
      <p class="stat-sub-header">Wardrobe</p>
      <div class="pieces wardrobe">
        <% for(const set of items.wardrobe){ %>
        <div class="wardrobe-set">
          <% for(const [index, item] of set.entries()) { %>
          <% if (item) { %>
          <div tabindex="0" data-item-id="<%= item.itemId %>" class="rich-item piece piece-<%= item.rarity %>-bg <%= getRarityUpgradeClass(item) %> index-<%= index %>">
            <% if(rarityOrder.indexOf(item.rarity) <= 4){ %>
            <div class="piece-shine"></div>
            <% } %>
            <% itemIcon(item, ['piece-icon']); %>
          </div>
          <% } else { %>
          <div class="piece armor-placeholder index-<%= index %>">
            <div class="piece-icon item-icon custom-icon"></div>
          </div>
          <% } %>
          <% } %>
        </div>
        <% } %>
        <% } %>
      </div>
      <% if(!items.no_inventory){ %>
      <div class="stat-container stat-weapons">
        <a class="stat-anchor" id="Weapons"></a>
        <h2 class="stat-header">Weapons</h2>
        <div class="stat-content">
          <% if (items.weapons.length == 0) { %>
          <div class="no-access"><%= calculated.display_name %> doesn't have any weapons.</div>
          <% } else { %>
          <% if (items.highest_rarity_sword) { %>
          <p class="stat-raw-values">
            <span class="stat-name">Active Weapon: </span>
            <span class="stat-active-weapon stat-value"><%- helper.renderLore(items.highest_rarity_sword.tag.display.Name) %></span>
          </p>
          <% } else if (items.weapons.length > 0) { %>
          <p class="stat-raw-values">
            <span class="stat-name">Active Weapon: </span><span class="stat-active-weapon stat-value piece-common-fg">None</span>
          </p>
          <% } %>
          <div class="pieces">
            <%
                items.weapons.filter(a => !a.hidden).forEach(item => {
              %>
            <div tabindex="0" data-item-id="<%= item.itemId %>" class="
                      rich-item
                      piece
                      piece-<%= item.rarity %>-bg
                      <%= getRarityUpgradeClass(item) %>
                    ">
              <% if (rarityOrder.indexOf(item.rarity) <= 4) { %>
              <div class="piece-shine"></div>
              <% } %>
              <% itemIcon(item, ['piece-icon']); %>
            </div>
            <%
                });
              %>
          </div>
          <% } %>
        </div>
      </div>
      <div class="stat-container stat-accessories">
        <a class="stat-anchor" id="Accessories"></a>
        <h2 class="stat-header">Accessories</h2>
        <div class="stat-content">
          <% if(items.no_inventory){ %>
          <div class="no-access"><%= calculated.display_name %> doesn't have inventory access via API enabled. <a target="_blank" class="enable-api" href="/resources/video/enable-api.mp4">See here</a> how to enable full API access.</div>
          <% }else if(items.accessories.length == 0){ %>
          <div class="no-access"><%= calculated.display_name %> doesn't have any accessories.</div>
          <% }else{ %>
          <p class="stat-raw-values">
            <%
                const maxTalis = items.accessories.filter(a => a.isUnique).length >= constants.UNIQUE_ACCESSORIES_COUNT ? 'golden-text': ''
                const maxRecombTalis = items.accessories.filter(a => a.isUnique && a.extra?.recombobulated).length >= constants.RECOMBABLE_ACCESSORIES_COUNT ? 'golden-text': ''
              %>

            <span class="stat-name <%= maxTalis %>">Unique Accessories: </span>
            <span class="stat-value <%= maxTalis %>"><%= items.accessories.filter(a => a.isUnique).length %> / <%= constants.UNIQUE_ACCESSORIES_COUNT %></span>
            <br>
            <span class="stat-name <%= maxTalis %>">Completion: </span>
            <span class="stat-value percent <%= maxTalis %>"><%= Math.round(items.accessories.filter(a => a.isUnique).length / constants.UNIQUE_ACCESSORIES_COUNT * 100) %></span>
            <br>
            <span class="stat-name <%= maxRecombTalis %>">Recombobulated: </span>
            <span class="stat-value <%= maxRecombTalis %>"><%= items.accessories.filter(a => a.isUnique && a.extra?.recombobulated).length %> / <%= constants.RECOMBABLE_ACCESSORIES_COUNT %></span>
            <br>
            <%
                const rarities = items.accessory_rarities;
                const player_magical_power = {}

                for (const rarity in constants.MAGICAL_POWER) {
                  player_magical_power[rarity] = 0
                  player_magical_power[rarity] += rarities[rarity] * constants.MAGICAL_POWER[rarity];
                }

                const mp_hegemony = rarities.hegemony ? constants.MAGICAL_POWER[rarities.hegemony.rarity] : 0
                const mp_total = Object.values(player_magical_power).reduce((a, b) => a + b) + mp_hegemony + Math.floor(calculated.abiphone.active / 2);
              %>
            <span data-tippy-content="
              Accessories Breakdown<br>
              <span style='color: var(--§8);' class='grey-text'>From your accessory bag</span><br><br>
              <span style='color: var(--§6);' class='grey-text'>22 MP</span> × <span style='color: var(--§d);' class='grey-text'><%= rarities.mythic %> Accs.</span> = <span style='color: var(--§6);' class='grey-text'><%= player_magical_power.mythic.toLocaleString() %> MP</span><br>
              <span style='color: var(--§6);' class='grey-text'>16 MP</span> × <span style='color: var(--§6);' class='grey-text'><%= rarities.legendary %> Accs.</span> = <span style='color: var(--§6);' class='grey-text'><%= player_magical_power.legendary.toLocaleString() %> MP</span><br>
              <span style='color: var(--§6);' class='grey-text'>12 MP</span> × <span style='color: var(--§5);' class='grey-text'><%= rarities.epic %> Accs.</span> = <span style='color: var(--§6);' class='grey-text'><%= player_magical_power.epic.toLocaleString() %> MP</span><br>
              <span style='color: var(--§6);' class='grey-text'>8 MP</span> × <span style='color: var(--§1);' class='grey-text'><%= rarities.rare %> Accs.</span> = <span style='color: var(--§6);' class='grey-text'><%= player_magical_power.rare.toLocaleString() %> MP</span><br>
              <span style='color: var(--§6);' class='grey-text'>5 MP</span> × <span style='color: var(--§a);' class='grey-text'><%= rarities.uncommon %> Accs.</span> = <span style='color: var(--§6);' class='grey-text'><%= player_magical_power.uncommon.toLocaleString() %> MP</span><br>
              <span style='color: var(--§6);' class='grey-text'>3 MP</span> × <span style='color: var(--§f);' class='grey-text'><%= rarities.common %> Accs.</span> = <span style='color: var(--§6);' class='grey-text'><%= player_magical_power.common.toLocaleString() %> MP</span><br>
              <span style='color: var(--§6);' class='grey-text'>3 MP</span> × <span style='color: var(--§c);' class='grey-text'><%= rarities.special %> Accs.</span> = <span style='color: var(--§6);' class='grey-text'><%= player_magical_power.special.toLocaleString() %> MP</span><br>
              <span style='color: var(--§6);' class='grey-text'>5 MP</span> × <span style='color: var(--§c);' class='grey-text'><%= rarities.very_special %> Accs.</span> = <span style='color: var(--§6);' class='grey-text'><%= player_magical_power.very_special.toLocaleString() %> MP</span><br>
              <br>
              <% if(rarities.hegemony) { %>
                <span style='color: var(--§<%= constants.RARITY_COLORS[rarities.hegemony.rarity] %>);' class='grey-text'>Hegemony Artifact</span> = <span style='color: var(--§6);' class='grey-text'>+<%= mp_hegemony.toLocaleString() %> MP</span><br>
              <% } %>
              <% if (rarities.abicase && Math.floor(calculated.abiphone.active / 2) > 0) {%>
                <span style='color: var(--§<%= constants.RARITY_COLORS["rare"] %>);' class='grey-text'>Abicase</span> = <span style='color: var(--§6);' class='grey-text'>+<%= Math.floor(calculated.abiphone.active / 2).toLocaleString() %> MP</span><br>
              <% } %>
              <br>
              Total: <span style='color: var(--§6);' class='grey-text'><%= mp_total.toLocaleString() %> Magical Power</span>
              ">
              <span class="stat-name">Magical Power: </span><span class="stat-value"><%= mp_total.toLocaleString() %></span>
            </span>
          </p>
          <% if(items.accessories.find(a => !a.isInactive) != undefined){ %>
          <div class="accessory-list">
            <p class="stat-sub-header" style="margin-bottom: 5px">Active Accessories</p>
            <% items.accessories.filter(a => !a.isInactive).forEach(item => {
                  %>
            <div tabindex="0" data-item-id="<%= item.itemId %>" class="rich-item piece piece-<%= item.rarity %>-bg <%= getRarityUpgradeClass(item) %>">
              <% if(rarityOrder.indexOf(item.rarity) <= 4){ %>
              <div class="piece-shine"></div>
              <% } %>
              <% itemIcon(item, ['piece-icon']); %>
            </div>
            <% }) %>
            <div class="accessories-extras">
              <div><%- getEnrichments(items.accessories.filter(a => a.isUnique && !a.isInactive)) %></div>
              <div data-bonus-stats="accessories,new_year_cake_bag"></div>
            </div>
          </div>
          <% } %>
          <% const inactiveAccessories = items.accessories.filter(a => a.isInactive === true || a.isUnique === false); %>
          <% if (inactiveAccessories.length > 0) { %>
          <div class="accessory-list">
            <p class="stat-sub-header">Inactive Accessories</p>
            <% for (const item of inactiveAccessories) { %>
            <div tabindex="0" data-item-id="<%= item.itemId %>" class="rich-item piece piece-<%= item.rarity %>-bg <%= getRarityUpgradeClass(item) %>">
              <% if(rarityOrder.indexOf(item.rarity) <= 4){ %>
              <div class="piece-shine"></div>
              <% } %>

              <% itemIcon(item, ['piece-icon']); %>
            </div>
            <% } %>
          </div>
          <% } %>
          <% if(calculated.missingAccessories.missing.length > 0 || calculated.missingAccessories.upgrades.length > 0) {
            <!-- Why does this exist? Won't touch it -->
            if(items.accessories.length == 1) %> <br>

          <button class="stat-sub-header extender" aria-controls="missing-accessories" aria-expanded="false">Missing Accessories</button>
          <div class="pieces extendable" id="missing-accessories">
            <br>

            <% if(calculated.missingAccessories.missing.length > 0) { %>
            <p class="stat-sub-header">Missing Accessories<span data-tippy-content='Missing accessories that are <strong>not</strong> upgrades of another accessory.'></span></p>
            <% for(const [index, accessory] of calculated.missingAccessories.missing.entries()){ %>
            <div tabindex="0" data-missing-accessory-index="<%= index %>" class="rich-item piece piece-<%= accessory.rarity %>-bg missing-accessory">
              <div style='background-image: url("<%= accessory.texture_path %>")' class="piece-icon item-icon custom-icon"></div>
            </div>
            <% } %>
            <% } %>

            <% if (calculated.missingAccessories.upgrades.length > 0) { %>
            <p class="stat-sub-header">Missing Accessory Upgrades<span data-tippy-content='Missing accessories that are upgrades of a lower tier accessory.'></span></p>
            <% for(const [index, accessory] of calculated.missingAccessories.upgrades.entries()){ %>
            <div tabindex="0" data-upgrade-accessory-index="<%= index %>" class="rich-item piece piece-<%= accessory.rarity %>-bg missing-accessory">
              <div style='background-image: url("<%= accessory.texture_path %>")' class="piece-icon item-icon custom-icon"></div>
            </div>
            <% } %>
            <% } %>

          </div>
          <% } %>
          <% } %>
        </div>
      </div>
      <% } %>
      <% if(calculated.pets.length > 0){ %>
      <div class="stat-container stat-pets">
        <a class="stat-anchor" id="Pets"></a>
        <h2 class="stat-header">Pets</h2>
        <div class="stat-content">
          <%
            const uniquePets = _.uniq(
              calculated.pets
                .filter(pet => !constants.PET_DATA[pet.type]?.bingoExclusive === true || calculated.profile.game_mode === 'bingo')
                .map((pet) => constants.PET_DATA[pet.type]?.typeGroup ?? pet.type)
            )
            const totalPets = _.uniq(
              Object.entries(
                Object.fromEntries(
                  Object.entries(constants.PET_DATA)
                    .filter(pet => !pet[1]?.bingoExclusive === true || calculated.profile.game_mode === 'bingo')
                )
              )
                .map(arr => arr[1].typeGroup || arr[0])
            ).length

            let totalPetXp = 0
            for (const pet of calculated.pets) {
              totalPetXp += pet.exp
            }

            let totalSkins = {}
            let badSkins = {}
            for (const [skin, skinData] of Object.entries(constants.PET_SKINS)) {
              if (skinData.release < Date.now()) {
                totalSkins[skin] = calculated.pets.find((pet) => `PET_SKIN_${pet.skin}` === skin) != undefined;
              }
            }
            let userUniqueSkins = Object.values(totalSkins).filter(skin => skin).length
            let totalUniqueSkins = Object.keys(totalSkins).length

            let totalCandiesUsed = calculated.pets.reduce((total, pet) => total + pet.candyUsed, 0)
          %>
          <p class="stat-raw-values">
            <% max = uniquePets.length >= totalPets ? 'golden-text': '' %>
            <span class="stat-name <%= max %>">Unique Pets: </span><span class="stat-value <%= max %>"><%= uniquePets.length %> / <%= totalPets %></span><br>

            <% max = userUniqueSkins >= totalUniqueSkins ? 'golden-text': '' %>
            <span class="stat-name <%= max %>">Unique Pet Skins: </span><span class="stat-value <%= max %>"><%= userUniqueSkins %> / <%= totalUniqueSkins %></span><br>
            <%
              const petRewards = constants.PET_REWARDS
              const petScore = calculated.petScore

              max = petScore >= Math.max(...Object.keys(petRewards)) ? 'golden-text' : ''
            %>
            <span data-tippy-content="
              Increase your pet score by collecting unique pets with a high rarity.<br><br>
              <table>
              <%
              const entries = Object.entries(petRewards)
              const reduced = entries.reduce((prev, curr) => petScore >= curr[0] ? curr : prev)[0]
              %>

              <% for (let i = 1; i < entries.length; i++) { %>
                <% const [score, {magic_find}] = entries[i] %>

                <% if (score === reduced) { %>
                  <tr><td><%= score %> Score: </td><td><span class='color-magic-find grey-text'>+<%= magic_find %> Magic Find</span><span style='color: var(--§5);' class='grey-text'> «</span></td>
                <% } else { %>
                  <tr><td><%= score %> Score: </td><td><span class='color-magic-find grey-text'>+<%= magic_find %> Magic Find</span></td>
                <% } %>
              <% } %>

              </table>
            "><span class="stat-name <%= max %>">Pet Score: </span><span class="stat-value <%= max %>"><%= petScore %></span></span><% if(calculated.pet_score_bonus.magic_find > 0){ %><span class="grey-text color-magic-find"> (+<%= calculated.pet_score_bonus.magic_find %> <abbr title="Magic Find">MF</abbr>)</span><% } %><br>

            <% max = totalCandiesUsed === 0 ? 'golden-text': '' %>
            <span class="stat-name <%= max %>">Total Candies Used: </span><span class="stat-value <%= max %>"><%= totalCandiesUsed %></span><br>

            <span class="stat-name">Total Pet XP: </span><span class="stat-value"><%= helper.formatNumber(totalPetXp, true) %></span>
          </p>
          <%
            const petsToShow = 100
            const petsToShowLimit = 1000
            const activePet = calculated.pets.find(pet => pet.active)
            const otherPets = calculated.pets.filter(pet => !pet.active).slice(0, petsToShowLimit)
          %>
          <% if (activePet) { %>
          <p class="stat-sub-header">Active Pet</p>
          <div class="pieces">
            <div tabindex="0" data-pet-index="0" class="active-pet rich-item piece piece-<%= activePet.rarity %>-bg <%= getRarityUpgradeClass(activePet) %>">
              <% if (rarityOrder.indexOf(activePet.rarity) <= 4) { %>
              <div class="piece-shine"></div>
              <% } %>
              <div style='background-image: url("<%= activePet.texture_path %>")' class="piece-icon item-icon custom-icon"></div>
            </div>
            <div class="active-pet-info">
              <div class="pet-name piece-<%= activePet.rarity %>-fg"><%= activePet.rarity %> <%- activePet.display_name %></div>
              <div class="pet-level">Level <%= activePet.level.level %></div>
            </div>
          </div>
          <div data-bonus-stats="pet"></div>
          <% } %>
          <% if (otherPets) { %>
          <p class="stat-sub-header"><%= activePet ? 'Other Pets' : '' %></p>
          <div class="pieces">
            <% for(const [index, pet] of otherPets.entries()) { %>

            <% if (
                  (activePet && index === petsToShow - 1) ||
                  (!activePet && index === petsToShow)
                ) { %>
          </div>
          <button class="stat-sub-header extender" aria-controls="showmore-pets" aria-expanded="false">Show More Pets</button>
          <div class="pieces extendable" id="showmore-pets">
            <% } %>

            <div tabindex="0" data-pet-index="<%= activePet ? index + 1 : index %>" class="other-pet rich-item piece piece-<%= pet.rarity %>-bg <%= getRarityUpgradeClass(pet) %>">
              <% if(rarityOrder.indexOf(pet.rarity) <= 4) { %>
              <div class="piece-shine"></div>
              <% } %>
              <div style='background-image: url("<%= pet.texture_path %>")' class="piece-icon item-icon custom-icon"></div>
              <div class="other-pet-level"><abbr title="Level">Lvl</abbr> <%= pet.level.level %></div>
            </div>
            <% } %>
          </div>
          <% } %>
          <% if(calculated.missingPets.length > 0) { %>
          <% if(calculated.pets.length == 1) { %>
          <br>
          <% } %>
          <button class="stat-sub-header extender" aria-controls="missing-pets" aria-expanded="false">Missing Pets</button>
          <div class="pieces extendable" id="missing-pets">
            <% for(const [index, pet] of calculated.missingPets.entries()) { %>
            <div tabindex="0" data-missing-pet-index="<%= index %>" class="rich-item piece piece-<%= pet.rarity %>-bg missing-pet">
              <div style='background-image: url("<%= pet.texture_path %>")' class="piece-icon item-icon custom-icon"></div>
            </div>
            <% } %>
          </div>
          <% } %>
        </div>
      </div>
      <% } %>
      <% if(!items.no_inventory){ %>
      <div class="stat-container stat-inventory">
        <a class="stat-anchor" id="Inventory"></a>
        <h2 class="stat-header">Inventory</h2>
        <div class="stat-content">
          <% if(items.no_inventory){ %>
          <div class="no-access"><%= calculated.display_name %> doesn't have inventory access via API enabled. <a target="_blank" class="enable-api" href="/resources/video/enable-api.mp4">See here</a> how to enable full API access.</div>
          <% }else{ %>
          <div id="inventory_container">
            <div id="inventory_header">
              <div class="inventory-header-line"></div>
              <div class="inventory-tabs-container">
                <%
                    const inventoryIconUrl = `https://crafatar.com/renders/head/${extra.isFoolsDay ? 'bd482739767c45dca1f8c33c40530952' : calculated.uuid }?size=32&overlay`
                  %>
                <button class="inventory-tab active-inventory" data-inventory-type="inventory">
                  <div class="inventory-tab-icon item-icon custom-icon" style="background-image: url('<%= inventoryIconUrl %>')"></div>
                  <div class="inventory-tab-name"><abbr title="Inventory">Inv</abbr></div>
                </button>

                <% if(items.storage.length > 0){ %>
                <button class="inventory-tab" data-inventory-type="storage">
                  <div class="inventory-tab-icon item-icon icon-54_0"></div>
                  <div class="inventory-tab-name">Storage</div>
                </button>
                <% } %>

                <% if(items.enderchest.length > 0){ %>
                <button class="inventory-tab" data-inventory-type="enderchest">
                  <div class="inventory-tab-icon item-icon icon-130_0"></div>
                  <div class="inventory-tab-name"><abbr title="Enderchest">Ender</abbr></div>
                </button>
                <% } %>

                <% if(items.personal_vault.length > 0){ %>
                <button class="inventory-tab" data-inventory-type="personal_vault">
                  <div class="inventory-tab-icon item-icon custom-icon" style="background-image: url(/head/f7aadff9ddc546fdcec6ed5919cc39dfa8d0c07ff4bc613a19f2e6d7f2593)"></div>
                  <div class="inventory-tab-name"><abbr title="Personal Vault">Vault</abbr></div>
                </button>
                <% } %>

                <% if(items.accessory_bag.length > 0){ %>
                <button class="inventory-tab" data-inventory-type="accessory_bag">
                  <div class="inventory-tab-icon item-icon custom-icon" style="background-image: url(/head/961a918c0c49ba8d053e522cb91abc74689367b4d8aa06bfc1ba9154730985ff)"></div>
                  <div class="inventory-tab-name"><abbr title="Accessory Bag">Accs</abbr></div>
                </button>
                <% } %>

                <% if(items.potion_bag.length > 0){ %>
                <button class="inventory-tab" data-inventory-type="potion_bag">
                  <div class="inventory-tab-icon item-icon custom-icon" style="background-image: url(/head/9f8b82427b260d0a61e6483fc3b2c35a585851e08a9a9df372548b4168cc817c)"></div>
                  <div class="inventory-tab-name"><abbr title="Potion Bag">Pots</abbr></div>
                </button>
                <% } %>

                <% if(items.fishing_bag.length > 0){ %>
                <button class="inventory-tab" data-inventory-type="fishing_bag">
                  <div class="inventory-tab-icon item-icon custom-icon" style="background-image: url(/head/eb8e297df6b8dffcf135dba84ec792d420ad8ecb458d144288572a84603b1631)"></div>
                  <div class="inventory-tab-name"><abbr title="Fishing Bag">Fish</abbr></div>
                </button>
                <% } %>

                <% if(items.quiver.length > 0){ %>
                <button class="inventory-tab" data-inventory-type="quiver">
                  <div class="inventory-tab-icon item-icon custom-icon" style="background-image: url(/head/4cb3acdc11ca747bf710e59f4c8e9b3d949fdd364c6869831ca878f0763d1787)"></div>
                  <div class="inventory-tab-name">Quiver</div>
                </button>
                <% } %>

                <% if (calculated.museum !== undefined) { %>
                  <button class="inventory-tab" data-inventory-type="museum">
                    <div class="inventory-tab-icon item-icon custom-icon" style="background-image: url(/head/438cf3f8e54afc3b3f91d20a49f324dca1486007fe545399055524c17941f4dc)"></div>
                    <div class="inventory-tab-name">Museum</div>
                  </button>
                <% } %>
              </div>
            </div>
            <inventory-view></inventory-view>
          </div>
          <% } %>
        </div>
      </div>
      <% } %>
      <div class="stat-container stat-skills">
        <a class="stat-anchor" id="Skills"></a>
        <h2 class="stat-header">Skills</h2>
        <div class="stat-content">

          <div class="stat-mining">
            <div class="category-header">
              <div class="category-icon">
                <div class="item-icon icon-274_0"></div>
              </div>
              <span>mining</span>
            </div>

            <% const mining = calculated.mining; %>

            <% if(items.mining_tools.length > 0){ %>
            <p class="stat-sub-header">Mining Tools</p>
            <% if(items.highest_rarity_mining_tool){ %>
            <p class="stat-raw-values">
              <span class="stat-name">Active Tool: </span>
              <span class="stat-active-pickaxe stat-value"><%- helper.renderLore(items.highest_rarity_mining_tool.tag.display.Name) %></span>
            </p>
            <% }else{ %>
            <p class="stat-raw-values">
              <span class="stat-name">Active Tool: </span><span class="stat-active-pickaxe stat-value piece-common-fg">None</span>
            </p>
            <% } %>
            <div class="pieces">
              <%  items.mining_tools.filter(a => !a.hidden).forEach(item => { %>
              <div tabindex="0" data-item-id="<%= item.itemId %>" class="rich-item piece piece-<%= item.rarity %>-bg <%= getRarityUpgradeClass(item) %>">
                <% if(rarityOrder.indexOf(item.rarity) <= 4){ %>
                <div class="piece-shine"></div>
                <% } %>
                <% itemIcon(item, ['piece-icon']); %>
              </div>
              <% }); %>
            </div>
            <% } %>

            <% if (!mining.core) { %>
            <p class="no-access"><%= calculated.display_name %> hasn't visited Dwarven Mines or Crystal Hollows yet.</p>
            <% } else { %>
            <p class="stat-sub-header">Dwarven Mines & Crystal Hollows</p>
            <p class="stat-raw-values">
              <!-- Commissions Milestone -->
              <% max = mining.commissions.milestone == constants.COMMISSIONS_MILESTONE ? 'golden-text' : '' %>
              <span class="stat-name <%= max %>">Commissions Milestone:</span>
              <span class="stat-value <%= max %>"><%= mining.commissions.milestone.toLocaleString() %></span>
              <br>
              <!-- Commission Completions -->
              <span class="stat-name">Commissions:</span>
              <span class="stat-value" data-tippy-content="Commissions from achievements across profiles"><%= mining.commissions.completions.toLocaleString() %></span>
              <br>
              <!-- Crystal Hollows Pass -->
              <% const chpass = mining.core.crystal_hollows_last_access > Date.now() - 5*60*60*1000 %>
              <% max = chpass ? 'golden-text' : '' %>
              <span class="stat-name <%= max %>">Crystal Hollows Pass:</span>
              <span class="stat-value <%= max %>" data-tippy-content="
                <span class='stat-name'>Last purchased:</span>
                <span class='stat-value'>
                <%=
                  mining.core.crystal_hollows_last_access > 0
                    ? `<local-time timestamp='${mining.core.crystal_hollows_last_access}'></local-time>`
                    : "Never"
                %>
                </span>
              "><%= chpass ? 'Purchased' : 'Expired' %></span>
              <br>
              <!-- Crystal Nucleus -->
              <%
                const delivered_parts = mining.core.crystal_nucleus?.precursor?.parts_delivered || []
                const precursor_parts = {}

                for (const [partId, partName] of Object.entries(constants.PRECURSOR_PARTS)) {
                  precursor_parts[partName] = delivered_parts.indexOf(partId) > -1
                }
              %>
              <span class="stat-name">Crystal Nucleus:</span>
              <span class="stat-value" data-tippy-content="
                <span class='stat-name'>Crystals:</span>
                <br>
                <span class='stat-name'>- Jade:</span>
                <span class='stat-value'><%= formatNucleusCrystal('jade', mining.core.crystal_nucleus.crystals?.jade_crystal?.state) %></span>
                <br>
                <span class='stat-name'>- Amber:</span>
                <span class='stat-value'><%= formatNucleusCrystal('amber', mining.core.crystal_nucleus.crystals?.amber_crystal?.state) %></span>
                <br>
                <span class='stat-name'>- Amethyst:</span>
                <span class='stat-value'><%= formatNucleusCrystal('amethyst', mining.core.crystal_nucleus.crystals?.amethyst_crystal?.state) %></span>
                <br>
                <span class='stat-name'>- Sapphire:</span>
                <span class='stat-value'><%= formatNucleusCrystal('sapphire', mining.core.crystal_nucleus.crystals?.sapphire_crystal?.state) %></span>
                <br>
                <span class='stat-name'>- Topaz:</span>
                <span class='stat-value'><%= formatNucleusCrystal('topaz', mining.core.crystal_nucleus.crystals?.topaz_crystal?.state) %></span>
                <br>
                <br>
                <span class='stat-name'>Other Crystals:</span>
                <br>
                <span class='stat-name'>- Ruby:</span>
                <span class='stat-value'><%= formatNucleusCrystal('ruby', mining.core.crystal_nucleus.crystals?.ruby_crystal?.state) %></span>
                <br>
                <span class='stat-name'>- Jasper:</span>
                <span class='stat-value'><%= formatNucleusCrystal('jasper', mining.core.crystal_nucleus.crystals?.jasper_crystal?.state) %></span>
                <% if ((mining.core.crystal_nucleus.crystals?.sapphire_crystal?.state || 'NOT_FOUND') === 'NOT_FOUND') { %>
                <br>
                <br>
                <span class='stat-name'>Precursor parts delivered:</span>
                <br>
                <% for (const [part, delivered] of Object.entries(precursor_parts)) { %>
                  <span class='stat-value' style='color: var(--§<%= delivered ? 'a' : 'c' %>)'><%= delivered ? '✔' : '✖' %> <%= part %></span><br>
                <% } %>
                <% } %>
              ">Completed <%= mining.core.crystal_nucleus.times_completed.toLocaleString() %> times</span>
              <br>
            </p>

            <p class="stat-sub-header">Heart of the Mountain</p>
            <p class="stat-raw-values">
              <!-- Tier -->
              <% max = mining.core.tier.level === constants.HOTM.tiers ? 'golden-text' : '' %>
              <span class="stat-name <%= max %>">Tier:</span>
              <span class="stat-value <%= max %>"><%= mining.core.tier.level %></span>
              <br>
              <!-- Token of the Mountain -->
              <% mining.core.tokens.spent > mining.core.tokens.total ? mining.core.tokens.total = mining.core.tokens.spent : null %>
              <% max = mining.core.tokens.spent === mining.core.tokens.total ? 'golden-text' : '' %>
              <span class="stat-name <%= max %>">Token of the Mountain:</span>
              <span class="stat-value <%= max %>"><%= mining.core.tokens.spent %>/<%= mining.core.tokens.total %></span>
              <br>
              <!-- Peak of the Mountain -->
              <% max = (mining.core.nodes["special_0"] || 0) === constants.MAX_PEAK_OF_THE_MOUNTAIN_LEVEL ? 'golden-text' : '' %>
              <span class="stat-name <%= max %>">Peak of the Mountain:</span>
              <span class="stat-value <%= max %>"><%= mining.core.nodes["special_0"] || 0 %>/<%= constants.MAX_PEAK_OF_THE_MOUNTAIN_LEVEL %></span>
              <br>
              <!-- Mithril Powder -->
              <% max = mining.core.powder.mithril.total >= constants.HOTM.powder_for_max_nodes.mithril_powder ? 'golden-text' : '' %>
              <span class="stat-name <%= max %>">Mithril Powder:</span>
              <span class="stat-value <%= max %>" data-tippy-content="
                <span class='stat-name'>Total:</span> <span class='stat-value'><%= mining.core.powder.mithril.total.toLocaleString() %></span><br>
                <span class='stat-name'>Spent:</span> <span class='stat-value'><%= mining.core.powder.mithril.spent.toLocaleString() %></span><br>
                <span class='stat-name'>Available:</span> <span class='stat-value'><%= mining.core.powder.mithril.available.toLocaleString() %></span>
              "><%= mining.core.powder.mithril.total.toLocaleString() %></span>
              <br>
              <!-- Gemstone Powder -->
              <% max = mining.core.powder.gemstone.total >= constants.HOTM.powder_for_max_nodes.gemstone_powder ? 'golden-text' : '' %>
              <span class="stat-name <%= max %>">Gemstone Powder:</span>
              <span class="stat-value <%= max %>" data-tippy-content="
                <span class='stat-name'>Total:</span> <span class='stat-value'><%= mining.core.powder.gemstone.total.toLocaleString() %></span><br>
                <span class='stat-name'>Spent:</span> <span class='stat-value'><%= mining.core.powder.gemstone.spent.toLocaleString() %></span><br>
                <span class='stat-name'>Available:</span> <span class='stat-value'><%= mining.core.powder.gemstone.available.toLocaleString() %></span>
              "><%= mining.core.powder.gemstone.total.toLocaleString() %></span>
              <br>
              <!-- Pickaxe Ability -->
              <span class="stat-name">Pickaxe Ability:</span>
              <span class="stat-value"><%= mining.core.selected_pickaxe_ability || 'None' %></span>
            </p>

            <div id="inventory_container">
              <inventory-view inventory-type="hotm"></inventory-view>
            </div>
            <% } %>

            <p class="stat-sub-header">Forge</p>
            <%
            if (mining.forge?.processes?.length > 0) {
              mining.forge.processes.forEach(process => {
          %>
            <div class="forge-item">
              <p class="stat-name forge-slot">Slot <%= process.slot %>:</p>
              <% if (!process.id.startsWith("UNKNOWN-")) { %>
              <span data-tippy-content="<local-time timestamp='<%= process.timeFinished %>'></local-time>" class="stat-value"><%= process.name %> - <%= process.timeFinished < Date.now() ? "ended" : `ending ${process.timeFinishedText}`%></span>
              <% } else { %>
              <span class="stat-value">Unknown item</span>
              <script>
                console.error("Unknown forge item id: <%= process.id.split('UNKNOWN-')[1] %>")
              </script>
              <% } %>
            </div>
            <%
              });
            } else {
          %>
            <p class="stat-raw-values">No items currently forging!</p>
            <% } %>
          </div>

          <div class="stat-farming">
            <div class="category-header">
              <div class="category-icon" onclick="window.open('https://www.youtube.com/watch?v=pZaY1jV96jI')">
                <div class="item-icon icon-294_0"></div>
              </div>
              <span>farming</span>
            </div>

            <p class="stat-raw-values">
              <span data-tippy-content="
                <span class='stat-name'>Farming Weight</span><br>
                <span class='stat-info'>Weight calculations by Elite</span>
                <br/><br/>
                <% for (const crop of Object.values(calculated.weight.farming.crops).sort((a, b) => a.name.toLowerCase().localeCompare(b.name.toLowerCase()))) { %>
                  <% if (crop.weight > 0) { %>
                    <span class='stat-name'><%= crop.name %>: </span>
                    <span class='stat-value'> <%= parseFloat(crop.weight.toFixed(2)).toLocaleString() %> </span><br/>
                  <% } %>
                <% } %>
                <br/>
                <span class='stat-name'>Total: </span>
                <span class='stat-value'><%= parseFloat(calculated.weight.farming.crop_weight.toFixed(2)).toLocaleString() %></span>">
                <span class="stat-name">Farming Weight: </span>
                <span class="stat-value"><%= parseFloat(Math.round(weight.total)).toLocaleString() %></span>
              </span><br>
              <span class="stat-name">Pelts: </span><span class="stat-value"><%= calculated.farming.pelts.toLocaleString() %></span><br>
              <% const farming = calculated.farming;
              if (farming.talked && farming.contests.attended_contests > 0) {%>
                <span class="stat-name">Contests attended: </span><span class="stat-value"><%= farming.contests.attended_contests.toLocaleString() %></span><br>
                <% max = farming.unique_golds == 10 ? 'golden-text' : '' %><span class="stat-name <%= max %>">Unique Golds: </span><span class="stat-value <%= max %>"><%= farming.unique_golds.toLocaleString() %></span><br>
              <% } %>
            </p>

            <% if (farming.talked && farming.contests.attended_contests > 0) {%>
            <p class="stat-raw-values">
              <% for(let badge of badgeOrder){ %>
              <span data-tippy-content='
                  <span class="stat-name">Current: </span><span class="stat-value"><%= farming.current_badges[badge].toLocaleString() %> Medals</span><br>
                  <span class="stat-name">Total: </span><span class="stat-value"><%= farming.total_badges[badge].toLocaleString() %> Medals</span>
                '>
                <span class="stat-name"><%= badge %> medals: </span>
                <span class="stat-value"><%= farming.total_badges[badge].toLocaleString() %></span></span><br>
              <% } %>
            </p>
            <% }else{ %>
            <p class="stat-raw-values">
              <%= calculated.display_name %> hasn't attended any contests yet.
            </p>
            <% } %>

            <% if(items.farming_tools.length > 0){ %>
            <p class="stat-sub-header">Farming Tools</p>
            <% if(items.highest_rarity_farming_tool){ %>
            <p class="stat-raw-values">
              <span class="stat-name">Active Tool: </span>
              <span class="stat-active-hoe stat-value"><%- helper.renderLore(items.highest_rarity_farming_tool.tag.display.Name) %></span>
            </p>
            <% }else{ %>
            <p class="stat-raw-values">
              <span class="stat-name">Active Tool: </span><span class="stat-active-hoe stat-value piece-common-fg">None</span>
            </p>
            <% } %>
            <div class="pieces">
              <%  items.farming_tools.filter(a => !a.hidden).forEach(item => { %>
              <div tabindex="0" data-item-id="<%= item.itemId %>" class="rich-item piece piece-<%= item.rarity %>-bg <%= getRarityUpgradeClass(item) %>">
                <% if(rarityOrder.indexOf(item.rarity) <= 4){ %>
                <div class="piece-shine"></div>
                <% } %>
                <% itemIcon(item, ['piece-icon']); %>
              </div>
              <% }); %>
            </div>
            <% } %>
             
            <% if(farming.talked) { %>
              <% if(Object.keys(calculated.farming.crops).length > 0){ %>
              <button class="stat-sub-header extender" aria-controls="farming-crops" aria-expanded="false">Farming Crops</button>
              <div class="stat-farming-crops extendable" id="farming-crops">
                <%
                const crops = Object.values(calculated.farming.crops).sort((a, b) => {
                  return b.contests - a.contests;
                });

                for(const crop of crops){
                  if(!crop.attended) continue;

                  let amountsTooltip = '';

                  for(let badge of badgeOrder)
                    amountsTooltip += `
                      <span class="stat-name">${helper.titleCase(badge)} Medals: </span>
                      <span class="stat-value">${crop.badges[badge].toLocaleString()}</span><br>
                    `;
                %>
                <div class="chip" data-tippy-content="<%= amountsTooltip %>">
                  <div class="chip-icon-wrapper">
                    <div class="item-icon icon-<%= crop.icon %>"></div>
                  </div>
                  <div class="chip-text">
                    <div class="collection-name <%= crop.unique_gold ? 'max-stat' : '' %>"><span class="stat-name"><%= crop.name %></span></div>
                    <div class="collection-amount">
                      <small class="stat-name">Personal Best: </small><small class="stat-value"><%= helper.formatNumber(crop.personal_best, true) %></small><br>
                      <small class="stat-name">Contests: </small><small class="stat-value"><%= crop.contests.toLocaleString() %></small><br>
                    </div>
                  </div>
                </div>
                <% } %>
              </div>
              <% } %>
            <% } %>
          </div>

          <div class="stat-fishing">
            <div class="category-header">
              <div class="category-icon">
                <div class="item-icon icon-346_0"></div>
              </div>
              <span>fishing</span>
            </div>

            <%
          let totalSeaCreatureKills = 0;

          for(const creature of calculated.kills){
            if(seaCreatures.includes(creature.entityId)) {
              totalSeaCreatureKills += creature.amount;
            }
          }
          %>

            <p class="stat-raw-values">
              <span class="stat-name">Items fished: </span><span class="stat-value"><%= calculated.fishing.total.toLocaleString() %></span><br>
              <span class="stat-name">Treasures fished: </span><span class="stat-value"><%= calculated.fishing.treasure.toLocaleString() %></span><br>
              <span class="stat-name">Large treasures fished: </span><span class="stat-value"><%= calculated.fishing.treasure_large.toLocaleString() %></span><br>
              <span class="stat-name">Sea Creatures killed: </span><span class="stat-value"><%= totalSeaCreatureKills.toLocaleString() %></span><br>
              <%
            if(calculated.fishing.shredder_fished > 0 && calculated.fishing.shredder_bait > 0){

              %>
              <span data-tippy-content='
            <span class="stat-name">Fished with Shredder: </span><span class="stat-value"><%= calculated.fishing.shredder_fished.toLocaleString() %></span><br>
            <span class="stat-name">Bait used with Shredder: </span><span class="stat-value"><%= calculated.fishing.shredder_bait.toLocaleString() %></span><br>
            '><span class="stat-name">Fished with Shredder: </span><span class="stat-value"><%= calculated.fishing.shredder_fished.toLocaleString() %></span></span><br>
              <% } %>
            </p>

            <% if(items.fishing_tools.length > 0){ %>
            <p class="stat-sub-header">Fishing Rods</p>
            <% if(items.highest_rarity_fishing_tool){ %>
            <p class="stat-raw-values">
              <span class="stat-name">Active Rod: </span>
              <span class="stat-active-rod stat-value"><%- helper.renderLore(items.highest_rarity_fishing_tool.tag.display.Name) %></span>
            </p>
            <% }else if(items.fishing_tools.length > 0){ %>
            <p class="stat-raw-values">
              <span class="stat-name">Active Rod: </span><span class="stat-active-rod stat-value piece-common-fg">None</span>
            </p>
            <% } %>
            <div class="pieces">
              <%
                items.fishing_tools.filter(a => !a.hidden).forEach(item => {
              %>
              <div tabindex="0" data-item-id="<%= item.itemId %>" class="
                      rich-item
                      piece
                      piece-<%= item.rarity %>-bg <%= getRarityUpgradeClass(item) %>
                    ">
                <% if(rarityOrder.indexOf(item.rarity) <= 4){ %>
                <div class="piece-shine"></div>
                <% } %>
                <% itemIcon(item, ['piece-icon']); %>
              </div>
              <%
                });
              %>
            </div>
            <% } %>

            <% if(totalSeaCreatureKills > 0){ %>
            <button class="stat-sub-header extender" aria-controls="missing-seacreatures" aria-expanded="false">Sea Creatures</button>
            <div class="sea-creatures extendable" id="missing-seacreatures">
              <% for(const creatureId of seaCreatures) {
                const creature = calculated.kills.find(creature => creature.entityId == creatureId);

                if(creature?.amount > 0 ) {
                  %>
              <div class="sea-creature">
                <div class="sea-creature-name"><span><%= creature.entityName %></span></div>
                <div class="sea-creature-image" style="background-image: url(/resources/img/sea_creatures/<%= creature.entityId %>.webp)"></div>
                <div class="sea-creature-kills"><span class="stat-value"><%= creature.amount.toLocaleString() %></span><span class="stat-name"> Kill<%= creature.amount != 1 ? 's' : '' %></span></div>
              </div>
              <%
                }
              } %>
            </div>
            <% } %>
            <button class="stat-sub-header extender" aria-controls="fishing-trophyfish" aria-expanded="false">Trophy Fish</button>
            <div class="trophyfish extendable" id="fishing-trophyfish">
              <p class="stat-raw-values">
                <span class="stat-name">Total Caught:</span>
                <span class="stat-value"><%= calculated.trophy_fish.total_caught.toLocaleString() %></span>
                <br>
                <% max = calculated.trophy_fish.stage.type === "diamond" ? 'golden-text' : '' %>
                <span class="stat-name <%= max %>">Current Stage:</span>
                <span class="stat-value <%= max %>"><%= calculated.trophy_fish.stage.name %></span>
                <% if (calculated.trophy_fish.stage.progress !== null) { %>
                  <span style='color: rgba(var(--text-rgb), 0.7);'> (<%= calculated.trophy_fish.stage.progress %>)</span>
                <% } %>
                <br>
              </p>

              <!-- ? Moves chips into next row. Reason - looks better -->
              <div style="width:100%;"></div>

              <div class="trophy-fish">
                <% for (const fish of calculated.trophy_fish.fish) { %>
                <div class="chip" data-tippy-content="<%= helper.renderLore(fish.description) %>">
                  <div class="chip-icon-wrapper">
                    <div style="background-image:url(/head/<%= fish.texture %>)" class="item-icon custom-icon"></div>
                  </div>

                  <div class="chip-text">
                    <div class="trophy-fish-data">
                      <div class="trophy-fish-info">
                        <span class="stat-name"> <%= fish.name %> </span>
                        <span class="trophy-fish-amount"> x<%= fish.caught.total.toLocaleString() %> </span>
                      </div>

                      <div class="trophy-fish-count">
                        <% for (const fishTier of trophyFishOrder) {
                          let count = fish.caught[fishTier] ?? 0; %>
                          <div class="<%= fishTier %>-count count-format"></div>
                          <% if (count > 0) { %>
                            <span class="count-value">
                              <%= fish.caught[fishTier].toLocaleString() %>
                            </span>
                          <% } else { %>
                            <span class="count-value">
                              <svg xmlns="http://www.w3.org/2000/svg" viewBox="4 2 24 20">
                                <path fill="currentColor" d="M13.46,12L19,17.54V19H17.54L12,13.46L6.46,19H5V17.54L10.54,12L5,6.46V5H6.46L12,10.54L17.54,5H19V6.46L13.46,12Z" />
                              </svg>
                            </span>
                          <% } %>
                        <% } %>
                      </div>
                    </div>
                  </div>
                </div>
                <% } %>
              </div>
            </div>

          </div>
          <% if(calculated.enchanting.experimented){ %>
          <div class="stat-enchanting">
            <div class="category-header">
              <div class="category-icon">
                <div class="item-icon icon-116_0"></div>
              </div>
              <span>enchanting</span>
            </div>

            <% const enchanting = calculated.enchanting; %>
            <button class="stat-sub-header extender" aria-controls="Experiments" aria-expanded="false">Experiments</button>
            <div class="stat-experiments extendable narrow-info-container-wrapper" id="Experiments">
              <% for(let game in enchanting.experiments){
            const game_data = enchanting.experiments[game]; %>
              <div class="narrow-info-container">
                <div class="narrow-info-header">
                  <span><%= game_data.name %></span>
                </div>
                <span>
                  <p class="stat-raw-values">
                    <%
                    const game_stats = helper.sortObject(game_data.stats);
                    for(let stat in game_stats){
                  %>
                    <span class="stat-name"><%= helper.titleCase(stat.replace('_', ' ')) %>: </span>
                    <span class="stat-value"><%= (stat == 'last_attempt' || stat == 'last_claimed') ? game_stats[stat].text : game_stats[stat] %></span><br>
                    <% } %>
                  </p>
                  <%
                for(let tier in game_data.tiers) {
                  const tier_data = game_data.tiers[tier];
                %>
                  <hr>
                  <div class="chip">
                    <div class="chip-icon-wrapper">
                      <div class="item-icon icon-<%= tier_data.icon.replace(':', '_'); %>"></div>
                    </div>
                    <div class="chip-text">
                      <div class="collection-name"><span class="stat-name"><%= tier_data.name %></span></div>
                      <div class="collection-amount">
                        <%
                      for(let info in tier_data) {
                        if(info == 'name' || info == 'icon') continue;
                      %>
                        <small class="stat-name"><%= helper.titleCase(info.replace('_', ' ')) %>: </small><small class="stat-value"><%= tier_data[info] %></small><br>
                        <% } %>
                      </div>
                    </div>
                  </div>
                  <% } %>
                </span>
              </div>
              <% } %>
            </div>
          </div>
          <% } %>
        </div>
      </div>
      <div class="stat-container stat-dungeons">
        <a class="stat-anchor" id="Dungeons"></a>
        <h2 class="stat-header">Dungeons</h2>
        <div class="stat-content">
          <% if (
        Object.keys(calculated.dungeons).length === 0 ||
        !calculated.dungeons.catacombs?.visited ||
        Object.keys(calculated.dungeons.catacombs.floors).length === 0
      ) { %>
          <p class="stat-raw-values">
            <%= calculated.display_name %> hasn't entered any dungeon yet.
          </p>
          <% } else { %>

          <% if (calculated.dungeons.used_classes) { %>
          <div class="skill-bars">
            <skill-component skill="catacombs" type="dungeon" icon="<%= skillItems.catacombs %>"></skill-component>

            <skill-component skill="healer" type="dungeon_class" icon="<%= skillItems.healer %>"></skill-component>
            <skill-component skill="mage" type="dungeon_class" icon="<%= skillItems.mage %>"></skill-component>
            <skill-component skill="berserk" type="dungeon_class" icon="<%= skillItems.berserk %>"></skill-component>
            <skill-component skill="archer" type="dungeon_class" icon="<%= skillItems.archer %>"></skill-component>
            <skill-component skill="tank" type="dungeon_class" icon="<%= skillItems.tank %>"></skill-component>
          </div>
          <% } %>

          <p class="stat-raw-values" style="margin: 20px 0;">
            <span class="stat-name">Selected Class: </span>
            <span class="stat-value"><%= helper.titleCase(calculated.dungeons.selected_class) %></span>
            <br>
            <% max = calculated.dungeons.class_average.max ? "golden-text" : "" %>
            <span data-tippy-content="
              <span class='stat-name'>Total Class XP: </span><span class='stat-value'><%= Math.round(calculated.dungeons.class_average.experience).toLocaleString() %></span>
              <div class='tippy-explanation'>Total Class XP gained in Catacombs.</div>
              <span class='stat-name'>Average Level: </span><span class='stat-value'><%= calculated.dungeons.class_average.avrg_level_with_progress.toFixed(2) %></span>
              <div class='tippy-explanation'>Average class level, includes progress to next level.</div>

              <span class='stat-name'>Average Class Level without progress: </span><span class='stat-value'><%= calculated.dungeons.class_average.avrg_level.toFixed(2) %></span>
              <div class='tippy-explanation'>Average class level without including partial level progress.</div>">
              <span class="stat-name <%= max %>">Class Average: </span><span class="stat-value <%= max %>"><%= calculated.dungeons.class_average.avrg_level.toFixed(2) %></span></span>
            <br>
            <% max = calculated.dungeons.catacombs.bonuses.item_boost === 465 ? "golden-text" : "" %>
            <span class="stat-name <%= max %>">Dungeon Item Boost: </span>
            <span class="stat-value percent <%= max %>"><%= calculated.dungeons.catacombs.bonuses.item_boost.toLocaleString() %></span>
            <br>
            <% max = calculated.dungeons.catacombs.highest_floor === "floor_7" ? "golden-text" : "" %>
            <span class="stat-name <%= max %>">Highest Floor Beaten (normal): </span>
            <span class="stat-value <%= max %>"><%= helper.titleCase(calculated.dungeons.catacombs.highest_floor.replace("_", " ")) %></span>
            <br>
            <% if (calculated.dungeons.master_catacombs?.visited && Object.keys(calculated.dungeons.master_catacombs.floors).length > 0) { %>
            <% max = calculated.dungeons.master_catacombs.highest_floor === "floor_7" ? "golden-text" : "" %>
            <span class="stat-name <%= max %>">Highest Floor Beaten (master): </span>
            <span class="stat-value <%= max %>"><%= helper.titleCase(calculated.dungeons.master_catacombs.highest_floor.replace("_", " ")) %></span>
            <br>
            <% } %>
            <% max = calculated.dungeons.journals.pages_collected === calculated.dungeons.journals.total_pages ? "golden-text" : "" %>
            <span class="stat-name <%= max %>">Journals Completed: </span>
            <span class="stat-value <%= max %>"><%= calculated.dungeons.journals.journals_completed %></span>
            <span class="grey-text"> (<%= calculated.dungeons.journals.pages_collected %>/<%= calculated.dungeons.journals.total_pages %>)</span>
            <br>
            <span class="stat-name">Secrets Found: </span>
            <span class="stat-value" data-tippy-content="Secrets from achievements across profiles"><%= calculated.dungeons.secrets_found.toLocaleString() %></span>
          </p>

          <p class="stat-sub-header">Catacombs</p>
          <div class="floor-containers narrow-info-container-wrapper">
            <% for (let [id, floor] of Object.entries(calculated.dungeons.catacombs.floors)) { %>
            <div class="narrow-info-container">
              <div class="narrow-info-header">
                <div class="floor-icon" style="background-image: url(/head/<%= floor.icon_texture %>)"></div>
                <span><%= floor.name.replace("_", " ") %></span>
              </div>
              <span>
                <button class="stat-sub-header extender" aria-controls="floor-<%= id %>" aria-expanded="false">Floor Stats</button>
                <div class="pieces extendable" id="floor-<%= id %>">
                  <% for (let [stat, value] of Object.entries(floor.stats)) { %>
                  <span class="stat-name"><%= helper.capitalizeFirstLetter(stat.split("_").join(" ")) %>: </span>
                  <span class="stat-value">
                    <% if(stat.startsWith("fastest_time")) { %>
                    <%= moment.duration(value, "milliseconds").format("m:ss.SSS") %>
                    <% } else { %>
                    <%= helper.formatNumber(value) %>
                    <% } %>
                  </span><br>
                  <% } %>
                  <% if(floor.most_damage) { %>
                  <span class="stat-name">Most Damage: </span>
                  <span class="stat-value"><%= helper.formatNumber(floor.most_damage.value) %></span>
                  <span class="stat-name">(<%= helper.titleCase(floor.most_damage.class) %>)</span>
                  <% } %>
                </div>
                <% if(floor.best_runs) { %>
                <button class="stat-sub-header extender" aria-controls="runs-<%= id %>" aria-expanded="false">Best Run</button>
                <div class="pieces extendable" id="runs-<%= id %>">
                  <span class="stat-name">Grade:</span>
                  <span class="stat-value"><%= helper.calcDungeonGrade(floor.best_runs[floor.best_runs.length - 1]) %></span>
                  <br>
                  <% for (let [stat, value] of Object.entries(floor.best_runs[floor.best_runs.length - 1])) {
                  if(stat == "teammates") continue; %>
                  <span class="stat-name"><%= helper.capitalizeFirstLetter(stat.split("_").join(" ")) %>: </span>
                  <span class="stat-value" <%- stat == "timestamp" ? `data-tippy-content='<local-time timestamp="${value}"></local-time>'` : ""%>><%=
                    (() => {
                      switch (stat) {
                        case "timestamp":
                          return moment(value).fromNow();
                        case "elapsed_time":
                          return moment.duration(value, "milliseconds").format("m:ss.SSS");
                        case "dungeon_class":
                          return helper.titleCase(value);
                        default:
                          return helper.formatNumber(value);
                      }
                    })()
                  %></span><br>
                  <% } %>
                </div>
                <% } %>
              </span>
            </div>
            <% } %>
          </div>

          <% if (calculated.dungeons.master_catacombs?.visited) { %>
          <p class="stat-sub-header">Master Catacombs</p>

          <% if (Object.keys(calculated.dungeons.master_catacombs.floors).length === 0) { %>
          <p class="stat-raw-values"><%= calculated.display_name %> hasn't completed any Master Catacombs floor yet.</p>
          <% } else { %>
          <div class="floor-containers narrow-info-container-wrapper">
            <% for (let [id, floor] of Object.entries(calculated.dungeons.master_catacombs.floors)) { %>
            <div class="narrow-info-container">
              <div class="narrow-info-header">
                <div class="floor-icon" style="background-image: url(/head/<%= floor.icon_texture %>)"></div>
                <span><%= floor.name.replace("_", " ") %></span>
              </div>
              <span>
                <button class="stat-sub-header extender" aria-controls="floor-<%= id %>" aria-expanded="false">Floor Stats</button>
                <div class="pieces extendable" id="floor-<%= id %>">
                  <% for (let [stat, value] of Object.entries(floor.stats)) { %>
                  <span class="stat-name"><%= helper.capitalizeFirstLetter(stat.split("_").join(" ")) %>: </span>
                  <span class="stat-value">
                    <% if(stat.startsWith("fastest_time")) { %>
                    <%= moment.duration(value, "milliseconds").format("m:ss.SSS") %>
                    <% } else { %>
                    <%= helper.formatNumber(value) %>
                    <% } %>
                  </span><br>
                  <% } %>
                  <% if(floor.most_damage) { %>
                  <span class="stat-name">Most Damage: </span>
                  <span class="stat-value"><%= helper.formatNumber(floor.most_damage.value) %></span>
                  <span class="stat-name">(<%= helper.titleCase(floor.most_damage.class) %>)</span>
                  <% } %>
                </div>
                <% if(floor.best_runs) { %>
                <button class="stat-sub-header extender" aria-controls="runs-<%= id %>" aria-expanded="false">Best Run</button>
                <div class="pieces extendable" id="runs-<%= id %>">
                  <span class="stat-name">Grade:</span>
                  <span class="stat-value"><%= helper.calcDungeonGrade(floor.best_runs[floor.best_runs.length - 1]) %></span>
                  <br>
                  <% for (let [stat, value] of Object.entries(floor.best_runs[floor.best_runs.length - 1])) {
                      if(stat == "teammates") continue; %>
                  <span class="stat-name"><%= helper.capitalizeFirstLetter(stat.split("_").join(" ")) %>: </span>
                  <span class="stat-value" <%- stat == "timestamp" ? `data-tippy-content='<local-time timestamp="${value}"></local-time>'` : ""%>><%=
                        (() => {
                          switch (stat) {
                            case "timestamp":
                              return moment(value).fromNow();
                            case "elapsed_time":
                              return moment.duration(value, "milliseconds").format("m:ss.SSS");
                            case "dungeon_class":
                              return helper.titleCase(value);
                            default:
                              return helper.formatNumber(value);
                          }
                        })()
                      %></span><br>
                  <% } %>
                </div>
                <% } %>
              </span>
            </div>
            <% } %>
          </div>
          <% } %>
          <% } %>

          <% if (calculated.dungeons.unlocked_collections) { %>
          <p class="stat-sub-header">Boss Collections</p>
          <div class="collections">
            <%
              for (let boss in calculated.dungeons.boss_collections) {
                let collection = calculated.dungeons.boss_collections[boss];
                let claimedTooltip = "";

                if (collection.claimed.length > 0) {
                  claimedTooltip += '<span class="stat-name">Claimed items:</span>';
                  for (let item in collection.claimed) {
                    claimedTooltip += `<br><span class="stat-value">- ${collection.claimed[item]}</span>`;
                  }
                  claimedTooltip += '<br>';
                }

                if (collection.unclaimed > 0) {
                  claimedTooltip += `<span class="stat-name">Unclaimed items: </span><span class="stat-value">${collection.unclaimed}</span>`;
                }
            %>
            <div class="chip" <% if (claimedTooltip != "") { %>data-tippy-content="<%= claimedTooltip %>" <% } %>>
              <div class="chip-icon-wrapper">
                <div style="background-image:url('/head/<%= collection.texture %>')" class="item-icon custom-icon"></div>
              </div>
              <div class="chip-text">
                <div class="collection-name <%= collection.maxed ? 'max-stat' : '' %>"><span class="stat-name"><%= collection.name %> </span><% if (collection.tier > 0) { %><span class="stat-value"><%= collection.tier %></span><% } %></div>
                <div class="collection-amount"><span class="stat-name">Bosses killed: </span><span class="stat-value"><%= collection.killed.toLocaleString() %></span></div>
              </div>
            </div>
            <% } %>
          </div>
          <% } %>
          <% } %>
        </div>
      </div>
      <div class="stat-container stat-slayer">
        <a class="stat-anchor" id="Slayer"></a>
        <h2 class="stat-header">Slayer</h2>
        <div class="stat-content">
          <% if (calculated.slayer_coins_spent.total == 0 || calculated.slayer_coins_spent.total === undefined) { %>
          <p class="stat-raw-values">
            <%= calculated.display_name %> hasn't played any Slayer yet.
          </p>
          <% } else { %>
          <p class="stat-raw-values">
            <span data-tippy-content="
              <span class='stat-name'>Approximate coins spent</span><br>
              <span class='stat-info'>Estimate of how many coins this player has spent on slayer quests. Precise values cannot be calculated due to a variety of factors, especially Mayor Aatrox's &quot;Slashed Pricing&quot; perk and slayer pricing changes after the Voidgloom Seraph update.</span><br>
              <br>
              <%
                for (const slayerName of Object.keys(calculated.slayers).sort((a, b) => slayerOrder.indexOf(a) - slayerOrder.indexOf(b))) {
                  if (!(slayerName in calculated.slayer_coins_spent)) {
                    continue;
                  }
              %>
                <span class='stat-name'><%= helper.capitalizeFirstLetter(slayerName) %>: </span>
                <span class='stat-value'><%= formatSlayerCoinsSpent(calculated.slayer_coins_spent[slayerName]) %></span><br>
              <% } %>
              <br>
              <span class='stat-name'>Total: </span><span class='stat-value'><%= formatSlayerCoinsSpent(calculated.slayer_coins_spent.total) %></span><br>
            ">
              <span class="stat-name">Total Slayer XP: </span><span class="stat-value"><%= calculated.slayer_xp.toLocaleString() %></span></span>
          </p>
          <div class="slayer-containers narrow-info-container-wrapper">
            <%

          for(const slayerName in calculated.slayers){
            const slayer = calculated.slayers[slayerName];

            if(slayer.level.progress >= 1 && slayer.level.currentLevel < slayer.level.maxLevel){
              slayer.level.unclaimed = true;
            }
          }

          
          const slayerNames = Object.keys(calculated.slayers).sort((a, b) => slayerOrder.indexOf(a) - slayerOrder.indexOf(b));
          for (const slayerName of slayerNames){
            const slayer = calculated.slayers[slayerName]

            if (slayer.xp === undefined || slayer.xp == 0) {
              continue;
            }

            if (Object.keys(slayer.kills).length == 0) {
              slayer.kills['1'] = 0;
            }

            const maxSlayerLevel = slayer.level.currentLevel;
            const totalKills = Object.values(slayer.kills).reduce((a, b) => a + b, 0);

            if (slayerInfo[slayerName] === undefined) {
              continue;
            } 
            %>

            <div class="narrow-info-container slayer">
              <div class="narrow-info-header">
                <div class="floor-icon" style="background-image: url(<%= slayerInfo[slayerName].head %>)"></div>
                <span> <%= slayerInfo[slayerName].boss %> </span>
              </div>

              <div class="slayer-kills">
                <% for(const [index, tier] of Object.keys(slayer.kills).entries()){ %>
                  <div class="slayer-kill">
                    <div class="tier-name">Tier <%= romanize(tier) %></div>
                    <div class="tier-kills"><%= slayer.kills[tier].toLocaleString() %></div>
                  </div>
                <% } %>
                <div class="slayer-kill">
                  <div class="tier-name">Total</div>
                  <div class="tier-kills"><%= totalKills.toLocaleString() %></div>
                </div>
              </div>

              <% if (slayer.level.unclaimed){ %>
                <div class="slayer-unclaimed">unclaimed slayer rewards!</div>
              <% } %>
              
              <% max = slayer.level.currentLevel == slayer.level.maxLevel ? 'golden-text' : '' %>
              <span class="<%= max %> stat-name slayer-level">
                <%= slayerName %> level <span class="stat-value <%= max %>"><%= slayer.level.currentLevel %></span>
              </span>

              <div class="slayer-bar <%= slayer.level.currentLevel == slayer.level.maxLevel ? 'maxed-slayer' : ''%>">
                <div class="skill-progress-bar slayer-progress-bar" style="--progress: <%= slayer.level.currentLevel == slayer.level.maxLevel ? 1 : slayer.level.progress %>"></div>
                <div class="skill-progress-text slayer-progress-text">
                  <%= slayer.level.xp.toLocaleString() %><% if(slayer.level.xpForNext != 0) { %> / <%= slayer.level.xpForNext.toLocaleString() %> <% } %> XP
                </div>
              </div>
            </div>
            <% } %>
          </div>
          <% 
          const maxSlayerLevel = Math.max(...Object.values(calculated.slayers).map(slayer => slayer.level?.currentLevel ?? 0));
          if (maxSlayerLevel > 0){ %>
            <div data-bonus-stats="slayer_zombie,slayer_spider,slayer_wolf,slayer_enderman"></div>
          <% } %>
          <% } %>
        </div>
      </div>
      <div class="stat-container stat-minions">
        <a class="stat-anchor" id="Minions"></a>
        <h2 class="stat-header">Minions</h2>
        <div class="stat-content">
          <%
          let uniqueMinions = 0;
          let maxedMinions = 0;
          let skippedMinions = 0;
          let uniqueMinionsType = {};
          let minionsType = {};

          for(const minion of calculated.minions){
            if (!uniqueMinionsType[minion.type]) uniqueMinionsType[minion.type] = 0
            if (!minionsType[minion.type]) minionsType[minion.type] = 0

            minionsType[minion.type] += 1
            if (minion.tiers == minion.maxLevel) uniqueMinionsType[minion.type] += 1

            uniqueMinions += minion.levels.length;
            skippedMinions += minion.maxLevel - minion.levels.length;

            if(minion.maxLevel == minion.tiers)
              maxedMinions++;
          }
        %>
          <a href="https://hypixel.net/threads/2166857/" target="_blank" rel="noreferrer" class="external-app">
            <div class="external-app-icon icon-google-sheets"></div>
            <div class="external-app-name">Minions Sheet <span class="grey-text">by TBlazeWarriorT</span></div>
            <div class="external-app-description">Check the next cheapest or fastest Minion upgrades and find out which Minions will earn you the most from Bazaar, for free.</div>
          </a>
          <p class="stat-raw-values">
            <% max = uniqueMinions == constants.MINIONS_MAX_UNIQUES ? 'golden-text' : '' %><span class="stat-name <%= max %>">Unique Minions: </span><span class="stat-value <%= max %>"><%= uniqueMinions %> / <%= constants.MINIONS_MAX_UNIQUES %></span><span class="grey-text"> (<%= Math.floor(uniqueMinions / constants.MINIONS_MAX_UNIQUES * 100) %>%)</span><br>
            <% max = calculated.minion_slots.currentSlots == constants.MINIONS_MAX_SLOTS ? 'golden-text' : '' %><span class="stat-name <%= max %>">Minion Slots: </span><span class="stat-value <%= max %>"><%= calculated.minion_slots.currentSlots %></span><span class=" grey-text"> (<%= calculated.minion_slots.toNextSlot %> to next slot)</span><br>
            <% max = calculated.misc.profile_upgrades.minion_slots == 5 ? 'golden-text' : '' %><span class="stat-name <%= max %>">Bonus Minion Slots: </span><span class="stat-value <%= max %>"><%= calculated.misc.profile_upgrades.minion_slots %> / <%= constants.PROFILE_UPGRADES['minion_slots'] %></span><br>
            <% max = maxedMinions == _.size(constants.MINIONS) ? 'golden-text' : '' %><span class=" stat-name <%= max %>">Maxed Minions: </span><span class="stat-value <%= max %>"><%= maxedMinions %> / <%= _.size(constants.MINIONS) %></span><br>
            <% if(skippedMinions > 0){ %>
            <span class="stat-name">Skipped Minion Tiers: </span><span class="stat-value"><%= skippedMinions %></span><br>
            <% } %>
          </p>
          <%
        for(const type of constants.MINION_TYPES){
          const minions = calculated.minions.filter(a => a.type == type)
          if(minions.length == 0) continue;
          %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon <%= skillItems[type] %>"></div>
            </div>
            <span><%= type %></span>

            <% if(uniqueMinionsType[type] >= minionsType[type]){ %>
            <span class="category-header-maxed">max!</span>
            <% }else{ %>
            <span class="category-header-detail">(<%= uniqueMinionsType[type] %> / <%= minionsType[type]  %> max)</span>
            <% } %>
          </div>
          <div class="minions">
            <% for(const minion of minions){ %>
            <div data-tippy-content="Crafted variants:<br><br>
              <%for (let i = 1; i <= minion.tiers; i++){ %>
                <div class='minion-variant <% if(minion.levels.includes(i)){ %>minion-crafted<% } %>'><%= romanize(i) %></div>
              <%  } %>
              " class="chip
              <%= minion.maxLevel == 0 ? 'no-minion' : '' %>
              <%= minion.maxLevel == minion.tiers ? 'max-stat' : '' %>
              <%= minion.maxLevel != minion.levels.length ? 'skipped-minion' : '' %>
              ">
              <div class="chip-icon-wrapper">
                <div style="background-image: url(<%= minion.head %>)" class="item-icon custom-icon"></div>
              </div>
              <div class="chip-text">
                <span class="stat-name"><%= minion.name %> </span><span class="stat-value"><%= minion.maxLevel %></span>
              </div>
            </div>
            <% } %>
          </div>
          <%
        } %>
        </div>
      </div>

      <% if (calculated.bestiary?.categories) {%>
      <div class="stat-container stat-bestiary">
        <a class="stat-anchor" id="Bestiary"></a>
        <h2 class="stat-header">Bestiary</h2>
        <div class="stat-content">
          <%
              let maxedBestiaryOnIsland = {}, bestariesOnIsland = {}, totalBestires = 0, totalMaxedBeasteries = 0, mBestiaryOnIsland = {}, maxLevel = 0;
              for(const island of Object.keys(calculated.bestiary.categories)) {
                for (const family of Object.keys(calculated.bestiary.categories[island])) {
                  totalBestires += 1;
                  maxLevel += calculated.bestiary.categories[island][family].maxTier;
                  if (!bestariesOnIsland[island]) bestariesOnIsland[island] = 0;
                  if (!maxedBestiaryOnIsland[island]) maxedBestiaryOnIsland[island] = 0;
                  if (!mBestiaryOnIsland[island]) mBestiaryOnIsland[island] = false;
                  bestariesOnIsland[island]++;
                  if (calculated.bestiary.categories[island][family].tier >= calculated.bestiary.categories[island][family].maxTier) {
                      totalMaxedBeasteries++;
                      maxedBestiaryOnIsland[island]++;
                  }
                  if (maxedBestiaryOnIsland[island] >= bestariesOnIsland[island]) {
                      mBestiaryOnIsland[island] = true;
                  } else {
                      mBestiaryOnIsland[island] = false;
                  }
                }
              }
            %>
          <% maxLevel = maxLevel / 10 %>

          <p class="stat-raw-values">
            <% totalMaxedBeasteries >= totalBestires ? 'golden-text' : '' %><span class="stat-name <%= totalMaxedBeasteries >= totalBestires %>">Maxed Beasteries: </span><span class="stat-value <%= totalMaxedBeasteries >= totalBestires %>"><%= totalMaxedBeasteries %> / <%= totalBestires%></span><br>
            <% calculated.bestiary.level >= maxLevel ? 'golden-text' : '' %><span class="stat-name <%= totalMaxedBeasteries >= maxLevel %>">Level: </span><span class="stat-value <%= totalMaxedBeasteries >= maxLevel %>"><%= calculated.bestiary.level.toLocaleString() %> / <%= maxLevel%></span>
          </p>

          <% for(const island of Object.keys(calculated.bestiary.categories)) { %>
          <div class="category-header">
            <div class="floor-icon" style="background-image: url(<%= bestiary[island].head %>)"></div>
            <span><%= bestiary[island].name %></span>
            <% if (mBestiaryOnIsland[island]) {%>
            <span class="category-header-maxed">max!</span>
            <%} else {%>
            <span class="category-header-detail">(<%= maxedBestiaryOnIsland[island] %> / <%= bestariesOnIsland[island] %> max)</span>
            <%}%>
            </div>
            <span class="category-header-detail"></span>
            <div class="collections">
              <% for (const family of Object.keys(calculated.bestiary.categories[island])) { %>
            <div class="chip" data-missing="<%= calculated.bestiary.categories[island][family].kills%>">
              <div class="chip-icon-wrapper">
                <% if (calculated.bestiary.categories[island][family].head) { %>
                <div style="background-image:url(/head/<%= calculated.bestiary.categories[island][family].head %>)" class="item-icon custom-icon"></div>
                <% } else { %>
                <div class="item-icon icon-<%= calculated.bestiary.categories[island][family].itemId %>_<%= calculated.bestiary.categories[island][family].damage %>"></div>
                <% } %>
              </div>
              <div class="chip-text">
                <div class="collection-name <%= calculated.bestiary.categories[island][family].tier >= calculated.bestiary.categories[island][family].maxTier ? 'max-stat' : '' %>"><span class="stat-name"><%= calculated.bestiary.categories[island][family].name %> </span><span class="stat-value"><%= calculated.bestiary.categories[island][family].tier %></span></div>
                <div class="collection-amount"><span class="stat-name">Kills: </span><span class="stat-value"><%= calculated.bestiary.categories[island][family].kills.toLocaleString() %></span></div>
              </div>
            </div>
            <% } %>
          </div>
          <% } %>
        </div>
      </div>
      <% } %>

      <% if(Object.keys(calculated.collections).length > 0){ %>
      <div class="stat-container stat-collections">
        <a class="stat-anchor" id="Collections"></a>
        <h2 class="stat-header">Collections</h2>
        <div class="stat-content">
          <p class="stat-raw-values">
            <%
            let maxCollections = 0;
            for(const collection of constants.COLLECTION_DATA)
              if(collection.skyblockId in calculated.collections
              && calculated.collections[collection.skyblockId].tier >= collection.maxTier)
                maxCollections++;
            %>
            <% max = maxCollections == constants.COLLECTION_DATA.length ? 'golden-text' : '' %><span class="stat-name <%= max %>">Maxed Collections: </span><span class="stat-value <%= max %>"><%= maxCollections %> / <%= constants.COLLECTION_DATA.length %></span>
          </p>
          <% for(const type of constants.COLLECTION_TYPES){
            const collections = [];

            const totalOfType = constants.COLLECTION_DATA.filter(a => a.type == type).length;
            let maxOfType = 0;

            for(const collection of constants.COLLECTION_DATA.filter(a => a.type == type))
              if(collection.skyblockId in calculated.collections)
                collections.push(Object.assign(collection, calculated.collections[collection.skyblockId]));

            for(const collection of collections)
              if(collection.tier >= collection.maxTier)
                maxOfType++;

            if(collections.length == 0)
              continue;

            %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon <%= skillItems[type] %>"></div>
            </div>
            <span><%= type %></span>
            <% if(maxOfType >= totalOfType){ %>
            <span class="category-header-maxed">max!</span>
            <% }else{ %>
            <span class="category-header-detail">(<%= maxOfType %> / <%= totalOfType %> max)</span>
            <% } %>
          </div>
          <div class="collections">
            <%

              for(const collection of collections){
                let amountsTooltip = '';

                for(const [index, amount] of collection.amounts.entries()){
                  amountsTooltip += `<span class="stat-name">${amount.username}: </span><span class="stat-value">${amount.amount.toLocaleString()}</span>`;

                  if(index < collection.amounts.length)
                    amountsTooltip += '<br>';
                }

                amountsTooltip += `<br><span class="stat-name">Total: </span><span class="stat-value">${collection.totalAmount.toLocaleString()}</span>`;
              %>
            <div class="chip" data-tippy-content="<%= amountsTooltip %>">
              <div class="chip-icon-wrapper">
                <% if ("texture" in collection) { %>
                <div style="background-image:url(/head/<%= collection.texture %>)" class="item-icon custom-icon"></div>
                <% } else { %>
                <div class="item-icon icon-<%= collection.id %>_<%= collection.damage %>"></div>
                <% } %>
              </div>
              <div class="chip-text">
                <div class="collection-name <%= collection.tier >= collection.maxTier ? 'max-stat' : '' %>"><span class="stat-name"><%= collection.name %> </span><span class="stat-value"><%= collection.tier %></span></div>
                <div class="collection-amount"><span class="stat-name">Amount: </span><span class="stat-value"><%= collection.amount.toLocaleString() %></span></div>
              </div>
            </div>
            <% } %>
          </div>
          <% } %>
        </div>
      </div>
      <% } %>
      <%if (Object.keys(calculated.crimsonIsles.kuudra_completed_tiers).length > 0 || Object.keys(calculated.crimsonIsles.dojo).length > 0) { %>
      <div class="stat-container stat-collections">
        <a class="stat-anchor" id="Crimson_Isle"></a>
        <h2 class="stat-header">Crimson Isle</h2>
        <% if (Object.keys(calculated.crimsonIsles.factions).length > 0) { %>
        <p class="stat-raw-values stat-kills">
          <span class="stat-name">Selected Faction: </span><span class="stat-value"><%= calculated.crimsonIsles.factions.selected_faction.replaceAll('mages', 'Mage').replaceAll('barbarians', 'Barbarian') %></span><br>
          <% max = calculated.crimsonIsles.factions.mages_reputation >= 12000 ? 'golden-text' : '' %>
          <span class="stat-name <%= max %>">Mage Reputation: </span><span class="stat-value <%= max %>"><%= calculated.crimsonIsles.factions.mages_reputation.toLocaleString() %></span><br>
          <% max = calculated.crimsonIsles.factions.barbarians_reputation >= 12000 ? 'golden-text' : '' %>
          <span class="stat-name <%= max %>">Barbarian Reputation: </span><span class="stat-value <%= max %>"><%= calculated.crimsonIsles.factions.barbarians_reputation.toLocaleString() %></span><br>
          <% } %>

          <% if (Object.keys(calculated.crimsonIsles.kuudra_completed_tiers).length > 0) { %>
        <p class="stat-sub-header">Kuudra Completions</p>
        <div class="collections">
          <%for (const tier in calculated.crimsonIsles.kuudra_completed_tiers) {
                const collection = calculated.crimsonIsles.kuudra_completed_tiers[tier];%>
          <div class="chip">
            <div class="chip-icon-wrapper">
              <div style="background-image:url('/head/<%= collection.head %>')" class="item-icon custom-icon"></div>
            </div>
            <div class="chip-text">
              <div class="collection-name"><span class="stat-name"><%= collection.name %> </span></div>
              <div class="collection-amount"><span class="stat-name">Kills: </span><span class="stat-value"><%= collection.completions.toLocaleString() %></span></div>
            </div>
          </div>
          <% } %>
        </div>
        <% } %>

        <% function getDojoRank(points) {
            if (points >= 1000) return 'S'
            if (points >= 800) return 'A'
            if (points >= 600) return 'B'
            if (points >= 400) return 'C'
            if (points >= 200) return 'D'
            return 'F'
          }
        if (Object.keys(calculated.crimsonIsles.dojo).length > 0) { %>
        <p class="stat-sub-header">Dojo Completions</p>
        <% max = calculated.crimsonIsles.total_dojo_points >= 7000 ? 'golden-text' : '' %><span class="stat-name <%= max %>">Total Points: </span><span class="stat-value <%= max %>"><%= calculated.crimsonIsles.total_dojo_points.toLocaleString() %></span><br><br>
        <div class="collections">
          <%for (const type of Object.keys(calculated.crimsonIsles.dojo)) {
            const dojo = calculated.crimsonIsles.dojo[type]%>
          <div class="chip">
            <div class="chip-icon-wrapper">
              <div class="item-icon icon-<%= dojo.id %>_<%= dojo.damage %>"></div>
            </div>
            <div class="chip-text">
              <div class="collection-name <%= dojo.points >= 1000 ? 'max-stat' : '' %>"><span class="stat-name"><%= dojo.name %> </span></div>
              <div class="collection-amount">
                <span class="stat-name">Points: </span><span class="stat-value"><%= dojo.points.toLocaleString() %></span><br>
                <span class="stat-name">Rank: </span><span class="stat-value"><%= getDojoRank(dojo.points) %></span><br>
                <span class="stat-name">Time: </span><span class="stat-value"><%= (dojo.time / 1000).toLocaleString() %> Seconds</span>
              </div>
            </div>
          </div>
          <% } %>
        </div>
        <% } %>
      </div>
      <% } %>

      <% if (calculated.rift !== null) { %>
        <div class="stat-container stat-collections">
          <a class="stat-anchor" id="Rift"></a>
          <h2 class="stat-header">Rift</h2>
          <span data-tippy-content="
            <span class='stat-name'>Lifetime Motes: </span><span class='stat-value'><%= Math.floor(calculated.rift.motes.lifetime).toLocaleString() %></span>
            <div class='tippy-explanation'>Total Motes earned in Rift.</div>
            <span class='stat-name'>Mote Orbs: </span><span class='stat-value'><%= Math.floor(calculated.rift.motes.orbs).toLocaleString() %></span>
            <div class='tippy-explanation'>Amount of Mote Orbs player has picked up inside of the Rift.</div>
            ">
            <span class="stat-name">Motes: </span><span class="stat-value"><%= Math.floor(calculated.rift.motes.purse).toLocaleString() %></span></span>
          <br>


          <span data-tippy-content="
            <span class='stat-name'>Progress: </span><span class='stat-value'><%= (calculated.rift.enigma.souls / calculated.rift.enigma.total_souls * 100).toFixed(2) %>%</span>
            <div class='tippy-explanation'>Percentage of Enigma Souls found.</div>
            ">
            <% max = calculated.rift.enigma.souls === calculated.rift.enigma.total_souls ? 'golden-text' : '' %>
            <span class="stat-name <%= max %>">Enigma Souls: </span><span class="stat-value <%= max %>"><%= calculated.rift.enigma.souls %> / <%= calculated.rift.enigma.total_souls %></span></span>
          <br>


          <p class="stat-sub-header">Porhtal</p>
          <% const porhtalsUnlocked = calculated.rift.wither_cage.killed_eyes.filter((a) => a.unlocked === true).length %>
          <% max = porhtalsUnlocked === calculated.rift.wither_cage.killed_eyes.length ? 'golden-text' : '' %>
          <span class="stat-name <%= max %>">Porhtals unlocked: </span><span class="stat-value <%= max %>"><%= porhtalsUnlocked %></span><br><br>
          <div class="collections">
            <% for (const portal of calculated.rift.wither_cage.killed_eyes) { %>
              <div class="chip" data-missing="<%= portal.unlocked === false %>">
                <div class="chip-icon-wrapper">
                  <div style="background-image:url('/head/<%= portal.texture %>')" class="item-icon custom-icon"></div>
                </div>

                <div class="chip-text">
                  <div class="collection-name"><span class="stat-name"><%= portal.name %> </span></div>
                </div>
              </div>
            <% } %>
          </div>


          <p class="stat-sub-header">Timecharms</p>
          <% max = calculated.rift.timecharms.obtained_timecharms === calculated.rift.timecharms.timecharms.length ? 'golden-text' : '' %>
          <span class="stat-name <%= max %>">Timecharms obtained: </span><span class="stat-value <%= max %>"><%= calculated.rift.timecharms.obtained_timecharms %></span><br><br>
          <div class="collections">
            <% for (const timecharm of calculated.rift.timecharms.timecharms) { %>
              <div class="chip" data-missing="<%= timecharm.unlocked === false %>">
                <div class="chip-icon-wrapper">
                  <div class="item-icon icon-<%= timecharm.id %>_<%= timecharm.damage %>"></div>
                </div>

                <div class="chip-text">
                  <% max = timecharm.unlocked === true ? 'golden-text' : '' %>
                  <div class="collection-name <%= max %>"><span class="stat-name"><%= timecharm.name %> </span></div>
                  <div class="collection-amount">
                    <% if (timecharm.unlocked === true) { %>
                      <span class="stat-name">Obtained: </span><span class="stat-value" data-tippy-content='Obtained on <local-time timestamp="<%= timecharm.unlocked_at  %>"></local-time>'><%= moment(timecharm.unlocked_at).fromNow() %></span>
                    <% } else { %>
                      <span class="stat-name">Not Obtained!</span>
                    <% } %>
                  </div>
                </div>
              </div>
            <% } %>   
          </div>
        </div>
      <% } %>

      <% if(Object.keys(calculated.misc).length > 0){ %>
      <div class="stat-container stat-misc">
        <a class="stat-anchor" id="Misc"></a>
        <h2 class="stat-header">Miscellaneous</h2>
        <div class="stat-content">

          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon custom-icon" style="background-image: url(/head/1e5574a4ef94ef4ca300d02f644d98be07dbfba7df78808e8a9a021b067d996d)"></div>
            </div>
            <span>Essence</span>
          </div>
          <div class="collections">
            <% for (const [key, value] of Object.entries(calculated.essence)) { %>
            <div class="chip" data-missing="<%= value === 0 %>">
              <div class="chip-icon-wrapper">
                <div style="background-image:url('<%= constants.ESSENCE[key].head %>')" class="item-icon custom-icon"></div>
              </div>
              <div class="chip-text">
                <div class="collection-name"><span class="stat-name"><%= constants.ESSENCE[key].name %></span></div>
                <div class="collection-amount"><span class="stat-name">Amount: </span><span class="stat-value"><%= value.toLocaleString() %></span></div>
              </div>
            </div>
            <% } %>
          </div>
          <button class="stat-sub-header extender" aria-controls="essence-shop" aria-expanded="false">Essence Shop</button>
          <div class="essence-shop extendable" id="essence-shop">
            <div>
              <% for (const essence of Object.keys(constants.ESSENCE_SHOP)) { %>
              <div class="category-icon">
                <div style="background-image:url('<%= constants.ESSENCE[essence].head %>')" class="item-icon custom-icon"></div>
              </div>
              <span class="stat-sub-header"><%= helper.capitalizeFirstLetter(essence) %> Shop</span><br>
              <br>

              <% for (const perk of Object.keys(constants.ESSENCE_SHOP[essence])) {
                  const essenceShop = constants.ESSENCE_SHOP[essence][perk];
                  const playerPerk = Object.keys(calculated.perks).find(p => p === perk);
                  %>

              <div class="chip-text">
                <span data-tippy-content="<%= essenceShop.description %>">
                  <% max = calculated.perks[playerPerk] >= essenceShop.maxLevel ? 'golden-text' : '' %>
                  <span class="stat-name <%= max %>"><%= essenceShop.name %>: </span><span class="stat-value <%= max %>"><%= calculated.perks[playerPerk] || 0 %></span>
                </span><br>
              </div>
              <% } %>
              <br>
              <% } %>
            </div>
          </div>
          <% if(calculated.kills.length > 0 || calculated.deaths.length > 0){
          let totalKills = calculated.kills.length;
          let totalDeaths = calculated.deaths.length;

          let rows = Math.min(Math.max(totalKills, totalDeaths), 10);

          %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon icon-267_0"></div>
            </div><span>kills</span>
          </div>
          <p class="stat-raw-values stat-kills">
            <span class="stat-name">Total Kills: </span><span class="stat-value"><%= calculated.kills.map(a => a.amount).reduce((a, b) => a + b, 0).toLocaleString() %></span><br>
            <span class="stat-name">Total Deaths: </span><span class="stat-value"><%= calculated.deaths.map(a => a.amount).reduce((a, b) => a + b, 0).toLocaleString() %></span>
          </p>

          <div class="kills-deaths-container narrow-info-container-wrapper">
            <div class="narrow-info-container top-kills">
              <div class="narrow-info-header">Kills</div>
              <div class="narrow-info-content">
                <% for(let i = 0; i < rows; i++){
                    const kill = calculated.kills[i];

                    if(typeof calculated.kills[i] === 'undefined'){
                    %>
                <div class="kill-stat">
                  <div class="kill-rank"></div>
                </div>
                <% }else{ %>
                <div class="kill-stat">
                  <div class="kill-rank">#<%= i + 1 %>&nbsp;</div>
                  <div class="kill-entity"><%= kill.entityName %></div>
                  <div class="stat-separator">:&nbsp;</div>
                  <div class="kill-amount"><%= kill.amount.toLocaleString() %></div>
                </div>
                <% }
                  } %>
                <% if(calculated.kills.length > 10 || calculated.deaths.length > 10){ %>
                <button class="kill-stat show-all <%= calculated.kills.length > 10 ? 'enabled' : '' %>" data-type="kills">show all</button>
                <% } %>
              </div>
            </div>
            <div class="narrow-info-container top-deaths">
              <div class="narrow-info-header">Deaths</div>
              <div class="narrow-info-content">
                <% for(let i = 0; i < rows; i++){
                    const death = calculated.deaths[i];

                    if(typeof death === 'undefined'){
                    %>
                <div class="kill-stat">
                  <div class="kill-rank"></div>
                </div>
                <% }else{ %>
                <div class="kill-stat">
                  <div class="kill-rank">#<%= i + 1 %>&nbsp;</div>
                  <div class="kill-entity"><%= death.entityName %></div>
                  <div class="stat-separator">:&nbsp;</div>
                  <div class="kill-amount"><%= death.amount.toLocaleString() %></div>
                </div>
                <% }
                  } %>
                <% if(calculated.kills.length > 10 || calculated.deaths.length > 10){ %>
                <button class="kill-stat show-all <%= calculated.deaths.length > 10 ? 'enabled' : '' %>" data-type="deaths">show all</button>
                <% } %>
              </div>
            </div>
          </div>
          <% } %>

          <% if('races' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon icon-317_0"></div>
            </div><span>races</span>
          </div>

          <div class="race-containers narrow-info-container-wrapper">
            <%
              const races = [
                { id: "dungeon_hub_crystal_core", name: "Crystal Core", icon: '399_0' },
                { id: "dungeon_hub_giant_mushroom", name: "Giant Mushroom", icon: '100_0' },
                { id: "dungeon_hub_precursor_ruins", name: "Precursor Ruins", icon: '98_1' }
              ];

              const types = ["anything", "no_pearls", "no_abilities", "nothing"];

              for(const race of races){
                const times = Object.keys(calculated.misc.races).filter(a => a.startsWith(race.id));

                if(times.length > 0){
                %>
            <div class="narrow-info-container">
              <div class="narrow-info-header"><%= race.name %></div>
              <div class="narrow-info-content">
                <%
                    const races_no_return = times.filter(a => a.includes("no_return"));
                    const races_with_return = times.filter(a => a.includes("with_return"));

                    if(races_no_return.length > 0){ %>
                <div class="narrow-info-section-header">No Return:</div>
                <% }

                    for(const type of types){
                      const key = `${race.id}_${type}_no_return_best_time`;
                      const duration = calculated.misc.races[key] ?? 0;
                      const raceTier = calculated.misc.objectives.completedRaces[key] ?? 0;

                      if(duration == 0)
                        continue;

                      let raceDuration = moment.duration(duration, "milliseconds").format("m:ss.SSS");

                      if(duration < 1000)
                        raceDuration = '0.' + raceDuration;
                      %>
                <div class="narrow-info-flexsb">
                  <div>
                    <span class="stat-name"><%= helper.titleCase(type.split("_").join(" ")) %>: </span>
                    <span class="stat-value"><%= raceDuration %></span>
                  </div>
                  <div>
                    <span class="stat-value"><%= helper.renderRaceTier(raceTier) %></span>
                  </div>
                </div>
                <% }

                    if(races_with_return.length > 0){ %>
                <div class="narrow-info-section-header">With Return:</div>
                <% }

                    for(const type of types){
                      const key = `${race.id}_${type}_with_return_best_time`;
                      const duration = calculated.misc.races[key] ?? 0;
                      const raceTier = calculated.misc.objectives.completedRaces[key] ?? 0;

                      if(duration == 0)
                        continue;

                      let raceDuration = moment.duration(duration, "milliseconds").format("m:ss.SSS");

                      if(duration < 1000)
                        raceDuration = '0.' + raceDuration;
                      %>
                <div class="narrow-info-flexsb">
                  <div>
                    <span class="stat-name"><%= helper.titleCase(type.split("_").join(" ")) %>: </span>
                    <span class="stat-value"><%= raceDuration %></span>
                  </div>
                  <div>
                    <span class="stat-value"><%= helper.renderRaceTier(raceTier) %></span>
                  </div>
                </div>
                <% } %>
              </div>
            </div>
            <%
                }
              }
              %>
            <div class="narrow-info-container">
              <div class="narrow-info-header">Other Races</div>
              <div class="narrow-info-content">
                <% for(const key in calculated.misc.races){
                      if(key.startsWith('dungeon_hub'))
                        continue;

                      const raceName = helper.capitalizeFirstLetter(key.replace(/_race_best_time.*/, "").split("_").join(" "));
                      let raceDuration = moment.duration(calculated.misc.races[key], "milliseconds").format("m:ss.SSS");
                      const raceTier = calculated.misc.objectives.completedRaces[key] ?? 0;

                      if(calculated.misc.races[key] < 1000)
                        raceDuration = '0.' + raceDuration;
                    %>
                <div class="narrow-info-flexsb">
                  <div>
                    <span class="stat-name"><%= raceName %>: </span>
                    <span class="stat-value"><%= raceDuration %></span>
                  </div>
                  <div>
                    <span class="stat-value"><%= helper.renderRaceTier(raceTier) %></span>
                  </div>
                </div>
                <% } %>
              </div>
            </div>
          </div>
          <% } %>
          <% if('gifts' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon custom-icon" style="background-image: url(/head/b73a2114136b8ee4926caa51785414036a2b76e4f1668cb89d99716c421)"></div>
            </div><span>Gifts</span>
          </div>
          <p class="stat-raw-values">
            <% for(const key in calculated.misc.gifts){ %>
            <span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.gifts[key].toLocaleString() %></span><br>
            <% } %>
          </p>
          <% } %>
          <% if('winter' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon icon-332_0"></div>
            </div><span>Season of jerry</span>
          </div>
          <p class="stat-raw-values">
            <% for(const key in calculated.misc.winter){ %>
            <span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.winter[key].toLocaleString() %></span><br>
            <% } %>
          </p>
          <% } %>
          <% if('dragons' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon custom-icon" style="background-image: url(/head/aec3ff563290b13ff3bcc36898af7eaa988b6cc18dc254147f58374afe9b21b9)"></div>
            </div><span>Dragons</span>
          </div>
          <p class="stat-raw-values">
            <% for(const key in calculated.misc.dragons){
                let tooltip = "";

                if(key == 'last_hits')
                  for(const kill of calculated.kills.filter(a => a.entityId.endsWith('_dragon') && a.entityId != 'master_wither_king_dragon'))
                    tooltip += `<span class="stat-name">${ kill.entityName }: </span><span class="stat-value">${ kill.amount }</span> <span class="grey-text">(${ Math.round(kill.amount / calculated.misc.dragons[key] * 100) }%)</span><br>`;

                if(key == 'deaths')
                  for(const death of calculated.deaths.filter(a => a.entityId.endsWith('_dragon') && a.entityId != 'master_wither_king_dragon'))
                    tooltip += `<span class="stat-name">${ death.entityName }: </span><span class="stat-value">${ death.amount }</span><br>`;
              %>
            <span <%- tooltip ? `data-tippy-content='${tooltip}'` : "" %>><span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.dragons[key].toLocaleString() %></span></span><br>
            <% } %>
          </p>
          <% } %>
          <% if('protector' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon custom-icon" style="background-image: url(https://sky.lea.moe/head/89091d79ea0f59ef7ef94d7bba6e5f17f2f7d4572c44f90f76c4819a714)"></div>
            </div><span>Endstone protectors</span>
          </div>
          <p class="stat-raw-values">
            <% for(const key in calculated.misc.protector){ %>
            <span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.protector[key].toLocaleString() %></span><br>
            <% } %>
          </p>
          <% } %>
          <% if('damage' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon icon-267_0"></div>
            </div><span>Damage</span>
          </div>
          <p class="stat-raw-values">
            <% for(const key in calculated.misc.damage){ %>
              <% const damage = calculated.misc.damage[key] > 100_000_000_000 ? helper.formatNumber(Math.floor(calculated.misc.damage[key]).toFixed(0), true) : Math.floor(calculated.misc.damage[key]).toLocaleString(); %>
            <span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= damage %></span><br>
            <% } %>
          </p>
          <% } %>
          <% if('milestones' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon custom-icon" style="background-image: url(/head/93c8aa3fde295fa9f9c27f734bdbab11d33a2e43e855accd7465352377413b)"></div>
            </div><span>Pet milestones</span>
          </div>
          <p class="stat-raw-values">
            <% for(const key in calculated.misc.milestones){
                let progress = {
                  rarity: milestone_rarities[pet_milestones[key].length-1],
                  maxed: true
                };
                let tooltip = "";

                for(let i = 0; i < pet_milestones[key].length; i++){
                  if(calculated.misc.milestones[key] < pet_milestones[key][i]){
                    progress = {
                      percentage: Math.round(calculated.misc.milestones[key]/pet_milestones[key][i]*100),
                      rarity: milestone_rarities[i],
                      maxed: false
                    };
                    break;
                  }
                }

                tooltip += `<span class="stat-name">Rarity: </span><span class="stat-value piece-${ progress.rarity }-fg">${ helper.capitalizeFirstLetter(progress.rarity) }</span><br><span class="stat-name">Progress: </span>`;
                if(progress.maxed)
                  tooltip += `<span class="stat-value golden-text">Maxed!</span>`;
                else
                  tooltip += `<span class="stat-value percent">${ progress.percentage.toLocaleString() }</span>`;
                %>
            <span <%- tooltip ? `data-tippy-content='${tooltip}'` : "" %>>
              <span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.milestones[key].toLocaleString() %></span></span><br>
            <% } %>
          </p>
          <% } %>
          <% if('burrows' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon custom-icon" style="background-image: url(/head/4c27e3cb52a64968e60c861ef1ab84e0a0cb5f07be103ac78da67761731f00c8)"></div>
            </div><span>Griffin burrows</span>
          </div>
          <p class="stat-raw-values">
            <%  let burrow_naming = {"dug_next": "dug_arrows", "dug_combat": "dug_monsters"}
              for(const key in calculated.misc.burrows){
                let name = burrow_naming[key] || key;
                let tooltip = "";

                for(const rarity in calculated.misc.burrows[key])
                  if(rarity != "total" && rarity != "null")
                    tooltip += `<span class="stat-name piece-${ rarity }-fg">${ helper.capitalizeFirstLetter(rarity) }: </span><span class="stat-value">${ calculated.misc.burrows[key][rarity] }</span><br>`;
              %>
            <span <%- tooltip ? `data-tippy-content='<span class="stat-name">Rarities used:</span><br>${tooltip}'` : "" %>><span class="stat-name"><%= helper.capitalizeFirstLetter(name.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.burrows[key].total.toLocaleString() %></span></span><br>
            <% } %>
          </p>
          <% } %>

          <% if('effects' in calculated.misc){
            if (Object.keys(calculated.misc.effects).some((key) => Object.keys(calculated.misc.effects[key]).length > 0)) { %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon custom-icon" style="background-image: url(/head/60226d4c1d30fbebecae939da900603e4cd0fed8592a1bb3e11f9ac92391a45a)"></div>
            </div>
            <span>Potions</span>
          </div>
          <% 
              let effects_tooltips = [];
              for (const key of Object.keys(calculated.misc.effects).sort()) {
                effects_tooltips[key] ??= [];
                for (let potion of calculated.misc.effects[key]) {
                  if (key === "active") {
                    if (potion?.effect === undefined || potion?.level === null) continue;
                    effects_tooltips[key].push(`<span class="stat-value">${constants.POTION_EFFECTS[potion.effect]?.[potion.level].name.replace('Potion', '') || potion.effect.split('_').map((effect) => helper.capitalizeFirstLetter(effect.toLowerCase())).join(' ')}</span><br>`)

                  } else {
                    potion = potion?.effect || potion

                    effects_tooltips[key].push(`<span class="stat-value">${potion.split('_').map((effect) => helper.capitalizeFirstLetter(effect.toLowerCase())).join(' ')}</span><br>`);
                  }
                }
              }
              %>
          <p class="stat-raw-values">
            <span <%- effects_tooltips['active'] ? `data-tippy-content='<span class="stat-name">Active Potion Effects: :</span><br>${effects_tooltips['active'].join("")}'` : "" %>>
              <span class="stat-name">Active Potion Effects: </span><span class="stat-value"><%= calculated.misc.effects.active.length %></span>
            </span><br>

            <span <%- effects_tooltips['paused'] ? `data-tippy-content='<span class="stat-name">Paused Potion Effects: </span><br>${effects_tooltips['paused'].join("")}'` : "" %>>
              <span class="stat-name">Paused Potion Effects: </span><span class="stat-value"><%= calculated.misc.effects.paused.length %></span>
            </span><br>

            <span <%- effects_tooltips['disabled'] ? `data-tippy-content='<span class="stat-name">Disabled Potion Effects: </span><br>${effects_tooltips['disabled'].join("")}'` : "" %>>
              <span class="stat-name">Disabled Potion Effects: </span><span class="stat-value"><%= calculated.misc.effects.disabled.length %></span>
            </span><br>
          </p>
          <% } %>
          <% } %>

          <% if('profile_upgrades' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon icon-154_0"></div>
            </div><span>Profile upgrades</span>
          </div>
          <p class="stat-raw-values">
            <% for(const upgrade in constants.PROFILE_UPGRADES){ %>
            <% max = calculated.misc.profile_upgrades[upgrade] == constants.PROFILE_UPGRADES[upgrade] ? 'golden-text' : '' %><span class="stat-name <%= max %>"><%= helper.capitalizeFirstLetter(upgrade.split("_").join(" ")); %>: </span><span class="stat-value <%= max %>"><%= calculated.misc.profile_upgrades[upgrade] %> / <%= constants.PROFILE_UPGRADES[upgrade] %></span><br>
            <% } %>
          </p>
          <% } %>
          <% if('auctions_sell' in calculated.misc){ %>
          <div class=" category-header">
            <div class="category-icon">
              <div class="item-icon icon-266_0"></div>
            </div><span>Auctions sold</span>
          </div>
          <p class="stat-raw-values">
            <% for(const key in calculated.misc.auctions_sell){
                let tooltip = "";

                if(key == 'items_sold')
                  for(const key of Object.keys(calculated.auctions_sold).sort((a, b) => rarityOrder.indexOf(a) - rarityOrder.indexOf(b)))
                    tooltip += `<span class="stat-name piece-${ key }-fg">${ helper.capitalizeFirstLetter(key) }: </span><span class="stat-value">${ calculated.auctions_sold[key] }</span><br>`;
              %>
            <span <%- tooltip ? `data-tippy-content='${tooltip}'` : "" %>><span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.auctions_sell[key].toLocaleString() %></span></span><br>
            <% } %>
          </p>
          <% } %>
          <% if('auctions_buy' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon icon-264_0"></div>
            </div><span>Auctions bought</span>
          </div>
          <p class="stat-raw-values">
            <% for(const key in calculated.misc.auctions_buy){
                let tooltip = "";

                if(key == 'items_bought')
                  for(const key of Object.keys(calculated.auctions_bought).sort((a, b) => rarityOrder.indexOf(a) - rarityOrder.indexOf(b)))
                    tooltip += `<span class="stat-name piece-${ key }-fg">${ helper.capitalizeFirstLetter(key) }: </span><span class="stat-value">${ calculated.auctions_bought[key] }</span><br>`;
              %>
            <span <%- tooltip ? `data-tippy-content='${tooltip}'` : "" %>><span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value"><%= calculated.misc.auctions_buy[key].toLocaleString() %></span></span><br>
            <% } %>
          </p>
          <% } %>

          <% if('claimed_items' in calculated.misc){ %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon icon-339_0"></div>
            </div><span>Claimed items</span>
          </div>
          <p class="stat-raw-values">
            <% for(const key in calculated.misc.claimed_items){
                let timestamp = calculated.misc.claimed_items[key];
              %>
            <span class="stat-name"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span>
            <span class="stat-value" data-tippy-content='Claimed on <local-time timestamp="<%= timestamp %>"></local-time>'><%= moment(timestamp).fromNow() %></span><br>
            <% } %>
          </p>
          <% } %>

          <% if ('uncategorized' in calculated.misc && Object.keys(calculated.misc.uncategorized).length > 0) { %>
          <div class="category-header">
            <div class="category-icon">
              <div class="item-icon icon-421_0"></div>
            </div><span>Uncategorized</span>
          </div>
          <p class="stat-raw-values">
            <% for (const [key, value] of Object.entries(calculated.misc.uncategorized)) { %>
            <% max = value.maxed === true ? 'golden-text': '' %>
            <span class="stat-name <%= max %>"><%= helper.capitalizeFirstLetter(key.split("_").join(" ")); %>: </span><span class="stat-value <%= max %>"><%= value.formatted %> </span>
            <br>
            <% } %>
          </p>
          <% } %>
        </div>
      </div>
      <% } %>
    </div>
  </main>
  <%- include('../includes/footer'); %>
  <script>
    const items = JSON.parse(`<%- JSON.stringify(items).replaceAll('\\', '\\\\') %>`);
    const calculated = JSON.parse(`<%- JSON.stringify(calculated).replaceAll('\\', '\\\\') %>`);
    <%
      const clientConstants = {
        MAX_FAVORITES: constants.MAX_FAVORITES,
      }
    %>
    const constants = JSON.parse(`<%- JSON.stringify(clientConstants).replaceAll('\\', '\\\\') %>`);
  </script>
</body>

</html>